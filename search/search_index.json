{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"IOTstack IOTstack is a builder for docker-compose to easily make and maintain IoT stacks on the Raspberry Pi. Announcements 2019-12-19 Added python container, tweaked update script 2019-12-12 modified zigbee2mqtt template file 2019-12-12 Added Function to add custom containers to the stack 2019-12-12 PR cmskedgell: Added Homebridge 2019-12-12 PR 877dev: Added trimming of online backups 2019-12-03 BUGFIX Mosquitto: Fixed issue where mosquitto failed to start as a result of 11-28 change 2019-12-03 Added terminal for postgres, temporarily removed setfacl from menu 2019-11-28 PR @stfnhmplr added diyHue 2019-11-28 Fixed update notification on menu 2019-11-28 Fixed mosquitto logs and database not mapping correctly to volumes. Pull new template to fix 2019-11-28 added the option to disable swapfile by setting swappiness to 0 2019-11-28 PR @stfnhmplr fixed incorrect shegang on MariaDB terminal.sh 2019-11-28 Added native install for RPIEasy 2019-11-27 Additions: NextCloud, MariaDB, MotionEye, Mozilla Webthings, blynk-server (fixed issue with selection.txt) 2019-11-22 BUGFIX selection.txt failed on fresh install, added pushd IOTstack to menu to ensure correct path 2019-11-22 Added notification into menu if project update is available 2019-11-20 BUGFIX influxdb backup: Placing docker_backup in crontab caused influxdb backup not to execute correctly 2019-11-20 BUGFIX disable swap: swapfile recreation on reboot fixed. Re-run from menu to fix. Node-RED: serial port. New template adds privileged which allows acces to serial devices EspruinoHub: available for testing Highlighted topics Bluetooth and Node-RED Saving files to disk inside containers Updating the Project Coming soon reverse proxy is now next on the list, I cant keep up with the ports Detection of arhcitecture for seperate stack options for amd64, armhf, i386 autocleanup of backups on cloud Gitea (in testing branch) OwnCloud About Docker stack for getting started on IoT on the Raspberry Pi. This Docker stack consists of: Node-RED Grafana InfluxDB Postgres Mosquitto mqtt Portainer Adminer openHAB Home Assistant (HASSIO) zigbee2mqtt Pi-Hole TasmoAdmin (parial wiki) Plex media server Telegraf (wiki coming soon) RTL_433 EspruinoHub (testing) MotionEye MariaDB Plex Homebridge In addition, there is a write-up and some scripts to get a dynamic DNS via duckdns and VPN up and running. Firstly what is docker? The correct question is \"what are containers?\". Docker is just one of the utilities to run a container. A Container can be thought of as ultra-minimal virtual machines, they are a collection of binaries that run in a sandbox environment. You download a preconfigured base image and create a new container. Only the differences between the base and your \"VM\" are stored. Containers don't have GUI s so generally the way you interact with them is via web services or you can launch into a terminal. One of the major advantages is that the image comes mostly preconfigured. There are pro's and cons for using native installs vs containers. For me, one of the best parts of containers is that it doesn't \"clutter\" your device. If you don't need Postgres anymore then just stop and delete the container. It will be like the container was never there. The container will fail if you try to run the docker and native vesions as the same time. It is best to install this on a fresh system. For those looking for a script that installs native applications check out Peter Scargill's script Tested platform Raspberry Pi 3B and 4B Raspbian (Buster). Older Pi's Docker will not run on a PiZero or A model 1 because of the CPU. It has not been tested on a Model 2. You can still use Peter Scargill's script . Running under a virtual machine For those wanting to test out the script in a Virtual Machine before installing on their Pi there are some limitations. The script is designed to work with Debian based distributions. Not all the container have x86_64 images. For example Portainer does not and will give an error when you try and start the stack. Feature Requests Please direct all feature requests to Discord . Youtube reference This repo was originally inspired by Andreas Spiess's video on using some of these tools. Some containers have been added to extend its functionality. YouTube video : This is an alternative approach to the setup. Be sure to watch the video for the instructions. Just note that the network addresses are different, see Networking . YouTube guide @peyanski (Kiril) made a YouTube video on getting started using the project. Download the project 1. On the lite image you will need to install git first. sudo apt install git 2. Download the repository with: git clone https://github.com/SensorsIot/IOTstack.git ~/IOTstack Due to some script restraints, this project needs to be stored in ~/IOTstack 3. To enter the directory run: cd ~/IOTstack The Menu I've added a menu to make things easier. It is good to familiarise yourself with the installation process. The menu can be used to install docker and build the docker-compose.yml file necessary for starting the stack. It also runs a few common commands. I do recommend you start to learn the docker and docker-compose commands if you plan on using Docker in the long run. I've added several helper scripts, have a look inside. Navigate to the project folder and run ./menu.sh Installing Docker from the menu Select \"Install Docker\" and follow the prompts. This ends with a reboot. Build the docker-compose file docker-compose uses the docker-compose.yml file to configure all the services. Run through the menu to select the options you want to install. Docker commands This menu executes shell scripts in the root of the project. It is not necessary to run them from the menu. Open up the shell script files to see what is inside and what they do. Miscellaneous commands Some helpful commands have been added like disabling swap. Running Docker commands From this point on make sure you are executing the commands from inside the project folder. Docker-compose commands need to be run from the folder where the docker-compose.yml is located. If you want to move the folder make sure you move the whole project folder. Starting and Stopping containers To start the stack: cd ~/IOTstack docker-compose up -d To stop the stack: cd ~/IOTstack docker-compose stop The first time you run 'start' the stack docker will download all the images for the web. Depending on how many containers you selected and your internet speed this can take a long while. The docker-compose down command stops the containers then deletes them. Persistent data Docker allows you to map folders inside your containers to folders on the disk. This is done with the \"volume\" key. There are two types of volumes. Modification to the container are reflected in the volume. Networking One common problem newcomers face is understanding that Docker creates an internal bridged network. A process running inside one container reaches a process running inside another container by using the name of that other container as the domain name. For example, if a Node-Red flow needs to: subscribe to an MQTT topic being managed by Mosquitto, it refers to \"mosquitto\" as the domain name and communicates over port 1883. send data to InfluxDB, it refers to \"influxdb\" as the domain name and communicates over port 8086. In particular, if you are migrating Node-Red flows from a non-Docker environment, they will probably contain references to the loopback address (127.0.0.1). Those will need to be updated. Similarly, if you are migrating a Grafana dashboard that relies on, say, InfluxDB as for its data. The data source will need to be updated to refer to \"influxdb:8086\". You can discover container names like this: cd ~/IOTstack docker-compose ps See also Networking . Add to the project Feel free to add your comments on features or images that you think should be added. Contributions If you use some of the tools in the project please consider donating or contributing on their projects. It doesn't have to be monetary, reporting bugs and PRs help improve the projects for everyone. Thanks @mrmx, @oscrx, @brianimmel, @Slyke, @AugustasV, @Paulf007, @affankingkhan, @877dev, @Paraphraser, @stfnhmplr, @peyanski, @cmskedgell","title":"IOTstack"},{"location":"#iotstack","text":"IOTstack is a builder for docker-compose to easily make and maintain IoT stacks on the Raspberry Pi.","title":"IOTstack"},{"location":"#announcements","text":"2019-12-19 Added python container, tweaked update script 2019-12-12 modified zigbee2mqtt template file 2019-12-12 Added Function to add custom containers to the stack 2019-12-12 PR cmskedgell: Added Homebridge 2019-12-12 PR 877dev: Added trimming of online backups 2019-12-03 BUGFIX Mosquitto: Fixed issue where mosquitto failed to start as a result of 11-28 change 2019-12-03 Added terminal for postgres, temporarily removed setfacl from menu 2019-11-28 PR @stfnhmplr added diyHue 2019-11-28 Fixed update notification on menu 2019-11-28 Fixed mosquitto logs and database not mapping correctly to volumes. Pull new template to fix 2019-11-28 added the option to disable swapfile by setting swappiness to 0 2019-11-28 PR @stfnhmplr fixed incorrect shegang on MariaDB terminal.sh 2019-11-28 Added native install for RPIEasy 2019-11-27 Additions: NextCloud, MariaDB, MotionEye, Mozilla Webthings, blynk-server (fixed issue with selection.txt) 2019-11-22 BUGFIX selection.txt failed on fresh install, added pushd IOTstack to menu to ensure correct path 2019-11-22 Added notification into menu if project update is available 2019-11-20 BUGFIX influxdb backup: Placing docker_backup in crontab caused influxdb backup not to execute correctly 2019-11-20 BUGFIX disable swap: swapfile recreation on reboot fixed. Re-run from menu to fix. Node-RED: serial port. New template adds privileged which allows acces to serial devices EspruinoHub: available for testing","title":"Announcements"},{"location":"#highlighted-topics","text":"Bluetooth and Node-RED Saving files to disk inside containers Updating the Project","title":"Highlighted topics"},{"location":"#coming-soon","text":"reverse proxy is now next on the list, I cant keep up with the ports Detection of arhcitecture for seperate stack options for amd64, armhf, i386 autocleanup of backups on cloud Gitea (in testing branch) OwnCloud","title":"Coming soon"},{"location":"#about","text":"Docker stack for getting started on IoT on the Raspberry Pi. This Docker stack consists of: Node-RED Grafana InfluxDB Postgres Mosquitto mqtt Portainer Adminer openHAB Home Assistant (HASSIO) zigbee2mqtt Pi-Hole TasmoAdmin (parial wiki) Plex media server Telegraf (wiki coming soon) RTL_433 EspruinoHub (testing) MotionEye MariaDB Plex Homebridge In addition, there is a write-up and some scripts to get a dynamic DNS via duckdns and VPN up and running. Firstly what is docker? The correct question is \"what are containers?\". Docker is just one of the utilities to run a container. A Container can be thought of as ultra-minimal virtual machines, they are a collection of binaries that run in a sandbox environment. You download a preconfigured base image and create a new container. Only the differences between the base and your \"VM\" are stored. Containers don't have GUI s so generally the way you interact with them is via web services or you can launch into a terminal. One of the major advantages is that the image comes mostly preconfigured. There are pro's and cons for using native installs vs containers. For me, one of the best parts of containers is that it doesn't \"clutter\" your device. If you don't need Postgres anymore then just stop and delete the container. It will be like the container was never there. The container will fail if you try to run the docker and native vesions as the same time. It is best to install this on a fresh system. For those looking for a script that installs native applications check out Peter Scargill's script","title":"About"},{"location":"#tested-platform","text":"Raspberry Pi 3B and 4B Raspbian (Buster).","title":"Tested platform"},{"location":"#older-pis","text":"Docker will not run on a PiZero or A model 1 because of the CPU. It has not been tested on a Model 2. You can still use Peter Scargill's script .","title":"Older Pi's"},{"location":"#running-under-a-virtual-machine","text":"For those wanting to test out the script in a Virtual Machine before installing on their Pi there are some limitations. The script is designed to work with Debian based distributions. Not all the container have x86_64 images. For example Portainer does not and will give an error when you try and start the stack.","title":"Running under a virtual machine"},{"location":"#feature-requests","text":"Please direct all feature requests to Discord .","title":"Feature Requests"},{"location":"#youtube-reference","text":"This repo was originally inspired by Andreas Spiess's video on using some of these tools. Some containers have been added to extend its functionality. YouTube video : This is an alternative approach to the setup. Be sure to watch the video for the instructions. Just note that the network addresses are different, see Networking .","title":"Youtube reference"},{"location":"#youtube-guide","text":"@peyanski (Kiril) made a YouTube video on getting started using the project.","title":"YouTube guide"},{"location":"#download-the-project","text":"1. On the lite image you will need to install git first. sudo apt install git 2. Download the repository with: git clone https://github.com/SensorsIot/IOTstack.git ~/IOTstack Due to some script restraints, this project needs to be stored in ~/IOTstack 3. To enter the directory run: cd ~/IOTstack","title":"Download the project"},{"location":"#the-menu","text":"I've added a menu to make things easier. It is good to familiarise yourself with the installation process. The menu can be used to install docker and build the docker-compose.yml file necessary for starting the stack. It also runs a few common commands. I do recommend you start to learn the docker and docker-compose commands if you plan on using Docker in the long run. I've added several helper scripts, have a look inside. Navigate to the project folder and run ./menu.sh","title":"The Menu"},{"location":"#installing-docker-from-the-menu","text":"Select \"Install Docker\" and follow the prompts. This ends with a reboot.","title":"Installing Docker from the menu"},{"location":"#build-the-docker-compose-file","text":"docker-compose uses the docker-compose.yml file to configure all the services. Run through the menu to select the options you want to install.","title":"Build the docker-compose file"},{"location":"#docker-commands","text":"This menu executes shell scripts in the root of the project. It is not necessary to run them from the menu. Open up the shell script files to see what is inside and what they do.","title":"Docker commands"},{"location":"#miscellaneous-commands","text":"Some helpful commands have been added like disabling swap.","title":"Miscellaneous commands"},{"location":"#running-docker-commands","text":"From this point on make sure you are executing the commands from inside the project folder. Docker-compose commands need to be run from the folder where the docker-compose.yml is located. If you want to move the folder make sure you move the whole project folder.","title":"Running Docker commands"},{"location":"#starting-and-stopping-containers","text":"To start the stack: cd ~/IOTstack docker-compose up -d To stop the stack: cd ~/IOTstack docker-compose stop The first time you run 'start' the stack docker will download all the images for the web. Depending on how many containers you selected and your internet speed this can take a long while. The docker-compose down command stops the containers then deletes them.","title":"Starting and Stopping containers"},{"location":"#persistent-data","text":"Docker allows you to map folders inside your containers to folders on the disk. This is done with the \"volume\" key. There are two types of volumes. Modification to the container are reflected in the volume.","title":"Persistent data"},{"location":"#networking","text":"One common problem newcomers face is understanding that Docker creates an internal bridged network. A process running inside one container reaches a process running inside another container by using the name of that other container as the domain name. For example, if a Node-Red flow needs to: subscribe to an MQTT topic being managed by Mosquitto, it refers to \"mosquitto\" as the domain name and communicates over port 1883. send data to InfluxDB, it refers to \"influxdb\" as the domain name and communicates over port 8086. In particular, if you are migrating Node-Red flows from a non-Docker environment, they will probably contain references to the loopback address (127.0.0.1). Those will need to be updated. Similarly, if you are migrating a Grafana dashboard that relies on, say, InfluxDB as for its data. The data source will need to be updated to refer to \"influxdb:8086\". You can discover container names like this: cd ~/IOTstack docker-compose ps See also Networking .","title":"Networking"},{"location":"#add-to-the-project","text":"Feel free to add your comments on features or images that you think should be added.","title":"Add to the project"},{"location":"#contributions","text":"If you use some of the tools in the project please consider donating or contributing on their projects. It doesn't have to be monetary, reporting bugs and PRs help improve the projects for everyone.","title":"Contributions"},{"location":"#thanks","text":"@mrmx, @oscrx, @brianimmel, @Slyke, @AugustasV, @Paulf007, @affankingkhan, @877dev, @Paraphraser, @stfnhmplr, @peyanski, @cmskedgell","title":"Thanks"},{"location":"Accessing-your-Device-from-the-internet/","text":"Accessing your device from the internet The challenge most of us face with remotely accessing your home network is that you don't have a static IP. From time to time the IP that your ISP assigns to you changes and it's difficult to keep up. Fortunately, there is a solution, a DynamicDNS. The section below shows you how to set up an easy to remember address that follows your public IP no matter when it changes. Secondly, how do you get into your home network? Your router has a firewall that is designed to keep the rest of the internet out of your network to protect you. Here we install a VPN and configure the firewall to only allow very secure VPN traffic in. DuckDNS If you want to have a dynamic DNS point to your Public IP I added a helper script. Register with duckdns.org and create a subdomain name. Then edit the nano ~/IOTstack/duck/duck.sh file and add your DOMAINS=\"YOUR_DOMAINS\" DUCKDNS_TOKEN=\"YOUR_DUCKDNS_TOKEN\" first test the script to make sure it works sudo ~/IOTstack/duck/duck.sh then cat /var/log/duck.log . If you get KO then something has gone wrong and you should check out your settings in the script. If you get an OK then you can do the next step. Create a cron job by running the following command crontab -e You will be asked to use an editor option 1 for nano should be fine paste the following in the editor */5 * * * * sudo ~/IOTstack/duck/duck.sh >/dev/null 2>&1 then ctrl+s and ctrl+x to save Your Public IP should be updated every five minutes PiVPN pimylifeup.com has an excellent tutorial on how to install PiVPN In point 17 and 18 they mention using noip for their dynamic DNS. Here you can use the DuckDNS address if you created one. Don't forget you need to open the port 1194 on your firewall. Most people won't be able to VPN from inside their network so download OpenVPN client for your mobile phone and try to connect over mobile data. ( More info. ) Once you activate your VPN (from your phone/laptop/work computer) you will effectively be on your home network and you can access your devices as if you were on the wifi at home. I personally use the VPN any time I'm on public wifi, all your traffic is secure. Zerotier https://www.zerotier.com/ Zerotier is an alternative to PiVPN that doesn't require port forwarding on your router. It does however require registering for their free tier service here . Kevin Zhang has written a how to guide here . Just note that the install link is outdated and should be: curl -s 'https://raw.githubusercontent.com/zerotier/ZeroTierOne/master/doc/contact%40zerotier.com.gpg' | gpg --import && \\ if z=$(curl -s 'https://install.zerotier.com/' | gpg); then echo \"$z\" | sudo bash; fi","title":"Accessing your device from the internet"},{"location":"Accessing-your-Device-from-the-internet/#accessing-your-device-from-the-internet","text":"The challenge most of us face with remotely accessing your home network is that you don't have a static IP. From time to time the IP that your ISP assigns to you changes and it's difficult to keep up. Fortunately, there is a solution, a DynamicDNS. The section below shows you how to set up an easy to remember address that follows your public IP no matter when it changes. Secondly, how do you get into your home network? Your router has a firewall that is designed to keep the rest of the internet out of your network to protect you. Here we install a VPN and configure the firewall to only allow very secure VPN traffic in.","title":"Accessing your device from the internet"},{"location":"Accessing-your-Device-from-the-internet/#duckdns","text":"If you want to have a dynamic DNS point to your Public IP I added a helper script. Register with duckdns.org and create a subdomain name. Then edit the nano ~/IOTstack/duck/duck.sh file and add your DOMAINS=\"YOUR_DOMAINS\" DUCKDNS_TOKEN=\"YOUR_DUCKDNS_TOKEN\" first test the script to make sure it works sudo ~/IOTstack/duck/duck.sh then cat /var/log/duck.log . If you get KO then something has gone wrong and you should check out your settings in the script. If you get an OK then you can do the next step. Create a cron job by running the following command crontab -e You will be asked to use an editor option 1 for nano should be fine paste the following in the editor */5 * * * * sudo ~/IOTstack/duck/duck.sh >/dev/null 2>&1 then ctrl+s and ctrl+x to save Your Public IP should be updated every five minutes","title":"DuckDNS"},{"location":"Accessing-your-Device-from-the-internet/#pivpn","text":"pimylifeup.com has an excellent tutorial on how to install PiVPN In point 17 and 18 they mention using noip for their dynamic DNS. Here you can use the DuckDNS address if you created one. Don't forget you need to open the port 1194 on your firewall. Most people won't be able to VPN from inside their network so download OpenVPN client for your mobile phone and try to connect over mobile data. ( More info. ) Once you activate your VPN (from your phone/laptop/work computer) you will effectively be on your home network and you can access your devices as if you were on the wifi at home. I personally use the VPN any time I'm on public wifi, all your traffic is secure.","title":"PiVPN"},{"location":"Accessing-your-Device-from-the-internet/#zerotier","text":"https://www.zerotier.com/ Zerotier is an alternative to PiVPN that doesn't require port forwarding on your router. It does however require registering for their free tier service here . Kevin Zhang has written a how to guide here . Just note that the install link is outdated and should be: curl -s 'https://raw.githubusercontent.com/zerotier/ZeroTierOne/master/doc/contact%40zerotier.com.gpg' | gpg --import && \\ if z=$(curl -s 'https://install.zerotier.com/' | gpg); then echo \"$z\" | sudo bash; fi","title":"Zerotier"},{"location":"Adminer/","text":"Adminer References Docker Website About This is a nice tool for managing databases. Web interface has moved to port 9080. There was an issue where openHAB and Adminer were using the same ports. If you have an port conflict edit the docker-compose.yml and under the adminer service change the line to read: ports: - 9080:8080","title":"Adminer"},{"location":"Adminer/#adminer","text":"","title":"Adminer"},{"location":"Adminer/#references","text":"Docker Website","title":"References"},{"location":"Adminer/#about","text":"This is a nice tool for managing databases. Web interface has moved to port 9080. There was an issue where openHAB and Adminer were using the same ports. If you have an port conflict edit the docker-compose.yml and under the adminer service change the line to read: ports: - 9080:8080","title":"About"},{"location":"Backups/","text":"Backups Because containers can easily be rebuilt from docker hub we only have to back up the data in the \"volumes\" directory. Cloud Backups Dropbox-Uploader This a great utility to easily upload data from your Pi to the cloud. https://magpi.raspberrypi.org/articles/dropbox-raspberry-pi. It can be installed from the Menu under Backups. rclone (Google Drive) This is a service to upload to Google Drive. The config is described here . Install it from the menu then follow the link for these sections: * Getting a Google Drive Client ID * Setting up the Rclone Configuration When naming the service in rclone config ensure to call it \"gdrive\" The Auto-mounting instructions for the drive in the link don't work on Rasbian . Auto-mounting of the drive isn't necessary for the backup script. If you want your Google Drive to mount on every boot then follow the instructions at the bottom of the wiki page Influxdb ~/IOTstack/scripts/backup_influxdb.sh does a database snapshot and stores it in ~/IOTstack/backups/influxdb/db . This can be restored with the help a script (that I still need to write) Docker backups The script ~/IOTstack/scripts/docker_backup.sh performs the master backup for the stack. This script can be placed in a cron job to backup on a schedule. Edit the crontab with crontab -e Then add 0 23 * * * ~/IOTstack/scripts/docker_backup.sh >/dev/null 2>&1 to have a backup every night at 23:00. This script cheats by copying the volume folder live. The correct way would be to stop the stack first then copy the volumes and restart. The cheating method shouldn't be a problem unless you have fast changing data like in influxdb. This is why the script makes a database export of influxdb and ignores its volume. Cloud integration The docker_backup.sh script now no longer requires modification to enable cloud backups. It now tests for the presence of and enable file in the backups folder Drobox-Uploader The backup tests for a file called ~/IOTstack/backups/dropbox , if it is present it will upload to dropbox. To disable dropbox upload delete the file. To enable run sudo touch ~/IOTstack/backups/dropbox rclone The backup tests for a file called ~/IOTstack/backups/rclone , if it is present it will upload to google drive. To disable rclone upload delete the file. To enable run sudo touch ~/IOTstack/backups/rclone Pruning online backups @877dev has added functionality to prune both local and cloud backups. For dropbox make sure you dont have any files that contain spaces in your backup directory as the script cannot handle it at this time. Restoring a backup The \"volumes\" directory contains all the persistent data necessary to recreate the container. The docker-compose.yml and the environment files are optional as they can be regenerated with the menu. Simply copy the volumes directory into the IOTstack directory, Rebuild the stack and start. Added your Dropbox token incorrectly or aborted the install at the token screen Make sure you are running the latest version of the project link . Run ~/Dropbox-Uploader/dropbox_uploader.sh unlink and if you have added it key then it will prompt you to confirm its removal. If no key was found it will ask you for a new key. Confirm by running ~/Dropbox-Uploader/dropbox_uploader.sh it should ask you for your key if you removed it or show you the following prompt if it has the key: $ ~/Dropbox-Uploader/dropbox_uploader.sh Dropbox Uploader v1.0 Andrea Fabrizi - andrea.fabrizi@gmail.com Usage: /home/pi/Dropbox-Uploader/dropbox_uploader.sh [PARAMETERS] COMMAND... Commands: upload <LOCAL_FILE/DIR ...> <REMOTE_FILE/DIR> download <REMOTE_FILE/DIR> [LOCAL_FILE/DIR] delete <REMOTE_FILE/DIR> move <REMOTE_FILE/DIR> <REMOTE_FILE/DIR> copy <REMOTE_FILE/DIR> <REMOTE_FILE/DIR> mkdir <REMOTE_DIR> .... Ensure you are not running as sudo as this will store your api in the /root directory as /root/.dropbox_uploader If you ran the command with sudo the remove the old token file if it exists with either sudo rm /root/.dropbox_uploader or sudo ~/Dropbox-Uploader/dropbox_uploader.sh unlink Auto-mount Gdrive with rclone To enable rclone to mount on boot you will need to make a user service. Run the following commands mkdir -p ~/.config/systemd/user nano ~/.config/systemd/user/gdrive.service Copy the following code into the editor, save and exit [Unit] Description=rclone: Remote FUSE filesystem for cloud storage Documentation=man:rclone(1) [Service] Type=notify ExecStartPre=/bin/mkdir -p %h/mnt/gdrive ExecStart= \\ /usr/bin/rclone mount \\ --fast-list \\ --vfs-cache-mode writes \\ gdrive: %h/mnt/gdrive [Install] WantedBy=default.target enable it to start on boot with: (no sudo) systemctl --user enable gdrive.service start with systemctl --user start gdrive.service if you no longer want it to start on boot then type: systemctl --user disable gdrive.service","title":"Backups"},{"location":"Backups/#backups","text":"Because containers can easily be rebuilt from docker hub we only have to back up the data in the \"volumes\" directory.","title":"Backups"},{"location":"Backups/#cloud-backups","text":"","title":"Cloud Backups"},{"location":"Backups/#dropbox-uploader","text":"This a great utility to easily upload data from your Pi to the cloud. https://magpi.raspberrypi.org/articles/dropbox-raspberry-pi. It can be installed from the Menu under Backups.","title":"Dropbox-Uploader"},{"location":"Backups/#rclone-google-drive","text":"This is a service to upload to Google Drive. The config is described here . Install it from the menu then follow the link for these sections: * Getting a Google Drive Client ID * Setting up the Rclone Configuration When naming the service in rclone config ensure to call it \"gdrive\" The Auto-mounting instructions for the drive in the link don't work on Rasbian . Auto-mounting of the drive isn't necessary for the backup script. If you want your Google Drive to mount on every boot then follow the instructions at the bottom of the wiki page","title":"rclone (Google Drive)"},{"location":"Backups/#influxdb","text":"~/IOTstack/scripts/backup_influxdb.sh does a database snapshot and stores it in ~/IOTstack/backups/influxdb/db . This can be restored with the help a script (that I still need to write)","title":"Influxdb"},{"location":"Backups/#docker-backups","text":"The script ~/IOTstack/scripts/docker_backup.sh performs the master backup for the stack. This script can be placed in a cron job to backup on a schedule. Edit the crontab with crontab -e Then add 0 23 * * * ~/IOTstack/scripts/docker_backup.sh >/dev/null 2>&1 to have a backup every night at 23:00. This script cheats by copying the volume folder live. The correct way would be to stop the stack first then copy the volumes and restart. The cheating method shouldn't be a problem unless you have fast changing data like in influxdb. This is why the script makes a database export of influxdb and ignores its volume.","title":"Docker backups"},{"location":"Backups/#cloud-integration","text":"The docker_backup.sh script now no longer requires modification to enable cloud backups. It now tests for the presence of and enable file in the backups folder","title":"Cloud integration"},{"location":"Backups/#drobox-uploader","text":"The backup tests for a file called ~/IOTstack/backups/dropbox , if it is present it will upload to dropbox. To disable dropbox upload delete the file. To enable run sudo touch ~/IOTstack/backups/dropbox","title":"Drobox-Uploader"},{"location":"Backups/#rclone","text":"The backup tests for a file called ~/IOTstack/backups/rclone , if it is present it will upload to google drive. To disable rclone upload delete the file. To enable run sudo touch ~/IOTstack/backups/rclone","title":"rclone"},{"location":"Backups/#pruning-online-backups","text":"@877dev has added functionality to prune both local and cloud backups. For dropbox make sure you dont have any files that contain spaces in your backup directory as the script cannot handle it at this time.","title":"Pruning online backups"},{"location":"Backups/#restoring-a-backup","text":"The \"volumes\" directory contains all the persistent data necessary to recreate the container. The docker-compose.yml and the environment files are optional as they can be regenerated with the menu. Simply copy the volumes directory into the IOTstack directory, Rebuild the stack and start.","title":"Restoring a backup"},{"location":"Backups/#added-your-dropbox-token-incorrectly-or-aborted-the-install-at-the-token-screen","text":"Make sure you are running the latest version of the project link . Run ~/Dropbox-Uploader/dropbox_uploader.sh unlink and if you have added it key then it will prompt you to confirm its removal. If no key was found it will ask you for a new key. Confirm by running ~/Dropbox-Uploader/dropbox_uploader.sh it should ask you for your key if you removed it or show you the following prompt if it has the key: $ ~/Dropbox-Uploader/dropbox_uploader.sh Dropbox Uploader v1.0 Andrea Fabrizi - andrea.fabrizi@gmail.com Usage: /home/pi/Dropbox-Uploader/dropbox_uploader.sh [PARAMETERS] COMMAND... Commands: upload <LOCAL_FILE/DIR ...> <REMOTE_FILE/DIR> download <REMOTE_FILE/DIR> [LOCAL_FILE/DIR] delete <REMOTE_FILE/DIR> move <REMOTE_FILE/DIR> <REMOTE_FILE/DIR> copy <REMOTE_FILE/DIR> <REMOTE_FILE/DIR> mkdir <REMOTE_DIR> .... Ensure you are not running as sudo as this will store your api in the /root directory as /root/.dropbox_uploader If you ran the command with sudo the remove the old token file if it exists with either sudo rm /root/.dropbox_uploader or sudo ~/Dropbox-Uploader/dropbox_uploader.sh unlink","title":"Added your Dropbox token incorrectly or aborted the install at the token screen"},{"location":"Backups/#auto-mount-gdrive-with-rclone","text":"To enable rclone to mount on boot you will need to make a user service. Run the following commands mkdir -p ~/.config/systemd/user nano ~/.config/systemd/user/gdrive.service Copy the following code into the editor, save and exit [Unit] Description=rclone: Remote FUSE filesystem for cloud storage Documentation=man:rclone(1) [Service] Type=notify ExecStartPre=/bin/mkdir -p %h/mnt/gdrive ExecStart= \\ /usr/bin/rclone mount \\ --fast-list \\ --vfs-cache-mode writes \\ gdrive: %h/mnt/gdrive [Install] WantedBy=default.target enable it to start on boot with: (no sudo) systemctl --user enable gdrive.service start with systemctl --user start gdrive.service if you no longer want it to start on boot then type: systemctl --user disable gdrive.service","title":"Auto-mount Gdrive with rclone"},{"location":"Blynk_server/","text":"Blynk server This is a custom implementation of Blynk Server blynk_server: build: ./services/blynk_server/. container_name: blynk_server restart: unless-stopped ports: - 8180:8080 - 8441:8441 - 9443:9443 volumes: - ./volumes/blynk_server/data:/data To connect to the admin interface navigate to <your pis IP>:9443/admin I don't know anything about this service so you will need to read though the setup on the Project Homepage When setting up the application on your mobile be sure to select custom setup here Writeup From @877dev Getting started Log into admin panel at https://youripaddress:9443/admin (Use your Pi's IP address, and ignore Chrome warning). Default credentials: user:admin@blynk.cc pass:admin Change username and password Click on Users > \"email address\" and edit email, name and password. Save changes Restarting the container using Portainer may be required to take effect. Setup gmail Optional step, useful for getting the auth token emailed to you. (To be added once confirmed working....) iOS/Android app setup Login the app as per the photos HERE Press \"New Project\" Give it a name, choose device \"Raspberry Pi 3 B\" so you have plenty of virtual pins available, and lastly select WiFi. Create project and the auth token will be emailed to you (if emails configured). You can also find the token in app under the phone app settings, or in the admin web interface by clicking Users>\"email address\" and scroll down to token. Quick usage guide for app Press on the empty page, the widgets will appear from the right. Select your widget, let's say a button. It appears on the page, press on it to configure. Give it a name and colour if you want. Press on PIN, and select virtual. Choose any pin i.e. V0 Press ok. To start the project running, press top right Play button. You will get an offline message, because no devices are connected to your project via the token. Enter node red..... Node red Install node-red-contrib-blynk-ws from pallette manager Drag a \"write event\" node into your flow, and connect to a debug node Configure the Blynk node for the first time: URL: wss://youripaddress:9443/websockets more info HERE Enter your auth token from before and save/exit. When you deploy the flow, notice the app shows connected message, as does the Blynk node. Press the button on the app, you will notice the payload is sent to the debug node. What next? Further information and advanced setup: https://github.com/blynkkk/blynk-server Check the documentation: https://docs.blynk.cc/ Visit the community forum pages: https://community.blynk.cc/ Interesting post by Peter Knight on MQTT/Node Red flows: https://community.blynk.cc/t/my-home-automation-projects-built-with-mqtt-and-node-red/29045 Some Blynk flow examples: https://github.com/877dev/Node-Red-flow-examples","title":"Blynk server"},{"location":"Blynk_server/#blynk-server","text":"This is a custom implementation of Blynk Server blynk_server: build: ./services/blynk_server/. container_name: blynk_server restart: unless-stopped ports: - 8180:8080 - 8441:8441 - 9443:9443 volumes: - ./volumes/blynk_server/data:/data To connect to the admin interface navigate to <your pis IP>:9443/admin I don't know anything about this service so you will need to read though the setup on the Project Homepage When setting up the application on your mobile be sure to select custom setup here Writeup From @877dev","title":"Blynk server"},{"location":"Blynk_server/#getting-started","text":"Log into admin panel at https://youripaddress:9443/admin (Use your Pi's IP address, and ignore Chrome warning). Default credentials: user:admin@blynk.cc pass:admin","title":"Getting started"},{"location":"Blynk_server/#change-username-and-password","text":"Click on Users > \"email address\" and edit email, name and password. Save changes Restarting the container using Portainer may be required to take effect.","title":"Change username and password"},{"location":"Blynk_server/#setup-gmail","text":"Optional step, useful for getting the auth token emailed to you. (To be added once confirmed working....)","title":"Setup gmail"},{"location":"Blynk_server/#iosandroid-app-setup","text":"Login the app as per the photos HERE Press \"New Project\" Give it a name, choose device \"Raspberry Pi 3 B\" so you have plenty of virtual pins available, and lastly select WiFi. Create project and the auth token will be emailed to you (if emails configured). You can also find the token in app under the phone app settings, or in the admin web interface by clicking Users>\"email address\" and scroll down to token.","title":"iOS/Android app setup"},{"location":"Blynk_server/#quick-usage-guide-for-app","text":"Press on the empty page, the widgets will appear from the right. Select your widget, let's say a button. It appears on the page, press on it to configure. Give it a name and colour if you want. Press on PIN, and select virtual. Choose any pin i.e. V0 Press ok. To start the project running, press top right Play button. You will get an offline message, because no devices are connected to your project via the token. Enter node red.....","title":"Quick usage guide for app"},{"location":"Blynk_server/#node-red","text":"Install node-red-contrib-blynk-ws from pallette manager Drag a \"write event\" node into your flow, and connect to a debug node Configure the Blynk node for the first time: URL: wss://youripaddress:9443/websockets more info HERE Enter your auth token from before and save/exit. When you deploy the flow, notice the app shows connected message, as does the Blynk node. Press the button on the app, you will notice the payload is sent to the debug node.","title":"Node red"},{"location":"Blynk_server/#what-next","text":"Further information and advanced setup: https://github.com/blynkkk/blynk-server Check the documentation: https://docs.blynk.cc/ Visit the community forum pages: https://community.blynk.cc/ Interesting post by Peter Knight on MQTT/Node Red flows: https://community.blynk.cc/t/my-home-automation-projects-built-with-mqtt-and-node-red/29045 Some Blynk flow examples: https://github.com/877dev/Node-Red-flow-examples","title":"What next?"},{"location":"Custom/","text":"Custom container If you have a container that you want to stop and start with the stack you can now use the custom container option. This you can use for testing or in prep for a Pull Request. You will need to create a directory for your container call IOTstack/services/<container> Inside that container create a service.yml containing your service and configurations. Have a look at one of the other services for inspiration. Create a file called IOTstack/services/custom.txt and and enter your container names, one per line Run the menu.sh and build the stack. After you have made the selection you will be asked if you want to add the custom containers. Now your container will be part of the docker-compose.yml file and will respond to the docker-compose up -d commands. Docker creates volumes under root and your container may require different ownership on the volume directory. You can see an example of the workaround for this in the python template in IOTstack/.templates/python/directoryfix.sh","title":"Custom container"},{"location":"Custom/#custom-container","text":"If you have a container that you want to stop and start with the stack you can now use the custom container option. This you can use for testing or in prep for a Pull Request. You will need to create a directory for your container call IOTstack/services/<container> Inside that container create a service.yml containing your service and configurations. Have a look at one of the other services for inspiration. Create a file called IOTstack/services/custom.txt and and enter your container names, one per line Run the menu.sh and build the stack. After you have made the selection you will be asked if you want to add the custom containers. Now your container will be part of the docker-compose.yml file and will respond to the docker-compose up -d commands. Docker creates volumes under root and your container may require different ownership on the volume directory. You can see an example of the workaround for this in the python template in IOTstack/.templates/python/directoryfix.sh","title":"Custom container"},{"location":"Docker-commands/","text":"Docker commands Aliases I've added bash aliases for stopping and starting the stack. They can be installed in the docker commands menu. These commands no longer need to be executed from the IOTstack directory and can be executed in any directory alias iotstack_up=\"docker-compose -f ~/IOTstack/docker-compose.yml up -d\" alias iotstack_down=\"docker-compose -f ~/IOTstack/docker-compose.yml down\" alias iotstack_start=\"docker-compose -f ~/IOTstack/docker-compose.yml start\" alias iotstack_stop=\"docker-compose -f ~/IOTstack/docker-compose.yml stop\" alias iotstack_update=\"docker-compose -f ~/IOTstack/docker-compose.yml pull\" alias iotstack_build=\"docker-compose -f ~/IOTstack/docker-compose.yml build\" You can now type iotstack_up , they even accept additional parameters iotstack_stop portainer","title":"Docker commands"},{"location":"Docker-commands/#docker-commands","text":"","title":"Docker commands"},{"location":"Docker-commands/#aliases","text":"I've added bash aliases for stopping and starting the stack. They can be installed in the docker commands menu. These commands no longer need to be executed from the IOTstack directory and can be executed in any directory alias iotstack_up=\"docker-compose -f ~/IOTstack/docker-compose.yml up -d\" alias iotstack_down=\"docker-compose -f ~/IOTstack/docker-compose.yml down\" alias iotstack_start=\"docker-compose -f ~/IOTstack/docker-compose.yml start\" alias iotstack_stop=\"docker-compose -f ~/IOTstack/docker-compose.yml stop\" alias iotstack_update=\"docker-compose -f ~/IOTstack/docker-compose.yml pull\" alias iotstack_build=\"docker-compose -f ~/IOTstack/docker-compose.yml build\" You can now type iotstack_up , they even accept additional parameters iotstack_stop portainer","title":"Aliases"},{"location":"EspruinoHub/","text":"Espruinohub This is a testing container I tried it however the container keeps restarting docker logs espruinohub I get \"BLE Broken?\" but could just be i dont have any BLE devices nearby web interface is on \"{your_Pis_IP}:1888\" see https://github.com/espruino/EspruinoHub#status--websocket-mqtt--espruino-web-ide for other details there were no recommendations for persistent data volumes. so docker-compose down may destroy all you configurations so use docker-compose stop in stead please let me know about your success or issues here","title":"Espruinohub"},{"location":"EspruinoHub/#espruinohub","text":"This is a testing container I tried it however the container keeps restarting docker logs espruinohub I get \"BLE Broken?\" but could just be i dont have any BLE devices nearby web interface is on \"{your_Pis_IP}:1888\" see https://github.com/espruino/EspruinoHub#status--websocket-mqtt--espruino-web-ide for other details there were no recommendations for persistent data volumes. so docker-compose down may destroy all you configurations so use docker-compose stop in stead please let me know about your success or issues here","title":"Espruinohub"},{"location":"Getting-Started/","text":"Getting started Download the project On the lite image you will need to install git first sudo apt-get install git Then download with git clone https://github.com/gcgarner/IOTstack.git ~/IOTstack Due to some script restraints, this project needs to be stored in ~/IOTstack To enter the directory run: cd ~/IOTstack The Menu I've added a menu to make things easier. It is good however to familiarise yourself with how things are installed. The menu can be used to install docker and then build the docker-compose.yml file necessary for starting the stack and it runs a few common commands. I do recommend you start to learn the docker and docker-compose commands if you plan using docker in the long run. I've added several helper scripts, have a look inside. Navigate to the project folder and run ./menu.sh Installing from the menu Select the first option and follow the prompts Build the docker-compose file docker-compose uses the docker-compose.yml file to configure all the services. Run through the menu to select the options you want to install. Docker commands This menu executes shell scripts in the root of the project. It is not necessary to run them from the menu. Open up the shell script files to see what is inside and what they do Miscellaneous commands Some helpful commands have been added like disabling swap Running Docker commands From this point on make sure you are executing the commands from inside the project folder. Docker-compose commands need to be run from the folder where the docker-compose.yml is located. If you want to move the folder make sure you move the whole project folder. Starting and Stopping containers to start the stack navigate to the project folder containing the docker-compose.yml file To start the stack run: docker-compose up -d or ./scripts/start.sh To stop: docker-compose stop stops without removing containers To remove the stack: docker-compose down stops containers, deletes them and removes the network The first time you run 'start' the stack docker will download all the images for the web. Depending on how many containers you selected and your internet speed this can take a long while. Persistent data Docker allows you to map folders inside your containers to folders on the disk. This is done with the \"volume\" key. There are two types of volumes. Any modification to the container reflects in the volume. Sharing files between the Pi and containers Have a look a the wiki on how to share files between Node-RED and the Pi. Wiki Updating the images If a new version of a container image is available on docker hub it can be updated by a pull command. Use the docker-compose stop command to stop the stack Pull the latest version from docker hub with one of the following command docker-compose pull or the script ./scripts/update.sh Start the new stack based on the updated images docker-compose up -d Node-RED error after modifications to setup files The Node-RED image differs from the rest of the images in this project. It uses the \"build\" key. It uses a dockerfile for the setup to inject the nodes for pre-installation. If you get an error for Node-RED run docker-compose build then docker-compose up -d Deleting containers, volumes and images ./prune-images.sh will remove all images not associated with a container. If you run it while the stack is up it will ignore any in-use images. If you run this while you stack is down it will delete all images and you will have to redownload all images from scratch. This command can be helpful to reclaim disk space after updating your images, just make sure to run it while your stack is running as not to delete the images in use. (your data will still be safe in your volume mapping) Deleting folder volumes If you want to delete the influxdb data folder run the following command sudo rm -r volumes/influxdb/ . Only the data folder is deleted leaving the env file intact. review the docker-compose.yml file to see where the file volumes are stored. You can use git to delete all files and folders to return your folder to the freshly cloned state, AS IN YOU WILL LOSE ALL YOUR DATA. sudo git clean -d -x -f will return the working tree to its clean state. USE WITH CAUTION!","title":"Getting started"},{"location":"Getting-Started/#getting-started","text":"","title":"Getting started"},{"location":"Getting-Started/#download-the-project","text":"On the lite image you will need to install git first sudo apt-get install git Then download with git clone https://github.com/gcgarner/IOTstack.git ~/IOTstack Due to some script restraints, this project needs to be stored in ~/IOTstack To enter the directory run: cd ~/IOTstack","title":"Download the project"},{"location":"Getting-Started/#the-menu","text":"I've added a menu to make things easier. It is good however to familiarise yourself with how things are installed. The menu can be used to install docker and then build the docker-compose.yml file necessary for starting the stack and it runs a few common commands. I do recommend you start to learn the docker and docker-compose commands if you plan using docker in the long run. I've added several helper scripts, have a look inside. Navigate to the project folder and run ./menu.sh","title":"The Menu"},{"location":"Getting-Started/#installing-from-the-menu","text":"Select the first option and follow the prompts","title":"Installing from the menu"},{"location":"Getting-Started/#build-the-docker-compose-file","text":"docker-compose uses the docker-compose.yml file to configure all the services. Run through the menu to select the options you want to install.","title":"Build the docker-compose file"},{"location":"Getting-Started/#docker-commands","text":"This menu executes shell scripts in the root of the project. It is not necessary to run them from the menu. Open up the shell script files to see what is inside and what they do","title":"Docker commands"},{"location":"Getting-Started/#miscellaneous-commands","text":"Some helpful commands have been added like disabling swap","title":"Miscellaneous commands"},{"location":"Getting-Started/#running-docker-commands","text":"From this point on make sure you are executing the commands from inside the project folder. Docker-compose commands need to be run from the folder where the docker-compose.yml is located. If you want to move the folder make sure you move the whole project folder.","title":"Running Docker commands"},{"location":"Getting-Started/#starting-and-stopping-containers","text":"to start the stack navigate to the project folder containing the docker-compose.yml file To start the stack run: docker-compose up -d or ./scripts/start.sh To stop: docker-compose stop stops without removing containers To remove the stack: docker-compose down stops containers, deletes them and removes the network The first time you run 'start' the stack docker will download all the images for the web. Depending on how many containers you selected and your internet speed this can take a long while.","title":"Starting and Stopping containers"},{"location":"Getting-Started/#persistent-data","text":"Docker allows you to map folders inside your containers to folders on the disk. This is done with the \"volume\" key. There are two types of volumes. Any modification to the container reflects in the volume.","title":"Persistent data"},{"location":"Getting-Started/#sharing-files-between-the-pi-and-containers","text":"Have a look a the wiki on how to share files between Node-RED and the Pi. Wiki","title":"Sharing files between the Pi and containers"},{"location":"Getting-Started/#updating-the-images","text":"If a new version of a container image is available on docker hub it can be updated by a pull command. Use the docker-compose stop command to stop the stack Pull the latest version from docker hub with one of the following command docker-compose pull or the script ./scripts/update.sh Start the new stack based on the updated images docker-compose up -d","title":"Updating the images"},{"location":"Getting-Started/#node-red-error-after-modifications-to-setup-files","text":"The Node-RED image differs from the rest of the images in this project. It uses the \"build\" key. It uses a dockerfile for the setup to inject the nodes for pre-installation. If you get an error for Node-RED run docker-compose build then docker-compose up -d","title":"Node-RED error after modifications to setup files"},{"location":"Getting-Started/#deleting-containers-volumes-and-images","text":"./prune-images.sh will remove all images not associated with a container. If you run it while the stack is up it will ignore any in-use images. If you run this while you stack is down it will delete all images and you will have to redownload all images from scratch. This command can be helpful to reclaim disk space after updating your images, just make sure to run it while your stack is running as not to delete the images in use. (your data will still be safe in your volume mapping)","title":"Deleting containers, volumes and images"},{"location":"Getting-Started/#deleting-folder-volumes","text":"If you want to delete the influxdb data folder run the following command sudo rm -r volumes/influxdb/ . Only the data folder is deleted leaving the env file intact. review the docker-compose.yml file to see where the file volumes are stored. You can use git to delete all files and folders to return your folder to the freshly cloned state, AS IN YOU WILL LOSE ALL YOUR DATA. sudo git clean -d -x -f will return the working tree to its clean state. USE WITH CAUTION!","title":"Deleting folder volumes"},{"location":"Grafana/","text":"Grafana References Docker Website Setting your time-zone The default ~/IOTstack/services/grafana/grafana.env contains this line: #TZ=Africa/Johannesburg Uncomment that line and change the right hand side to your own timezone . Security If Grafana has just been installed but has never been launched then the following will be true: The folder ~/IOTstack/volumes/grafana will not exist; and The file ~/IOTstack/services/grafana/grafana.env will contain these lines: ``` GF_SECURITY_ADMIN_USER=admin GF_SECURITY_ADMIN_PASSWORD=admin ``` You should see those lines as documentation rather than something you are being invited to edit. It is telling you that the default administative user for Grafana is \"admin\" and that the default password for that user is \"admin\". If you do not change anything then, when you bring up the stack and use a browser to connect to your Raspberry Pi on port 3000, Grafana will: Expect you to login as user \"admin\" with password \"admin\"; and then Force you to change the default password to something else. Thereafter, you will login as \"admin\" with whatever password you chose. You can change the administrator's password as often as you like via the web UI ( profile button, change password tab). This method (of not touching these two keys in grafana.env ) is the recommended approach. Please try to resist the temptation to fiddle! I want a different admin username (not recommended) If, before you bring up the stack for the first time, you do this: GF_SECURITY_ADMIN_USER=jack #GF_SECURITY_ADMIN_PASSWORD=admin then, when you bring up the stack and connect on port 3000, Grafana will: Expect you to login as user \"jack\" with password \"admin\"; and then Force you to change the default password to something else. Thereafter, \"jack\" will be the Grafana administrator and you will login with the password you chose, until you decide to change the password to something else via the web UI. Don't think you can come back later and tweak the Grafana administrator name in the environment variables. It doesn't work that way. It's a one-shot. I want a different default admin password (not recommended) Well, first off, the two methods above both make you set a different password on first login so there probably isn't much point to this. But, if you really insist\u2026 If, before you bring up the stack for the first time, you do this: #GF_SECURITY_ADMIN_USER=admin GF_SECURITY_ADMIN_PASSWORD=jack then, when you bring up the stack and use a browser to connect to your Raspberry Pi on port 3000, Grafana will expect you to login as user \"admin\" with password \"jack\". Grafana will not force you to change the password on first login but you will still be able to change it via the web UI. But don't think you can come back later and change the password in the environment variables. It doesn't work that way. It's a one-shot. I want to change everything (not recommended) If, before you bring up the stack for the first time, you do this: GF_SECURITY_ADMIN_USER=bill GF_SECURITY_ADMIN_PASSWORD=jack then, when you bring up the stack and use a browser to connect to your Raspberry Pi on port 3000, Grafana will expect you to login as user \"bill\" with password \"jack\". Grafana will not force you to change the password on first login but you will still be able to change it via the web UI. But don't think you can come back later and tweak either the username or password in the environment variables. It doesn't work that way. It's a one-shot. Distilling it down Before Grafana is launched for the first time: GF_SECURITY_ADMIN_USER has a default value of \"admin\". You can explicitly set it to \"admin\" or some other value. Whatever option you choose then that's the account name of Grafana's administrative user. But choosing any value other than \"admin\" is probably a bad idea. GF_SECURITY_ADMIN_PASSWORD has a default value of \"admin\". You can explicitly set it to \"admin\" or some other value. If its value is \"admin\" then you will be forced to change it the first time you login to Grafana. If its value is something other than \"admin\" then that will be the password until you change it via the web UI. These two environment keys only work for the first launch of Grafana. Once Grafana has been launched, you can never change either the username or the password by editing grafana.env . For this reason, it is better to leave grafana.env in its shrink-wrapped state. Your first login is as \"admin/admin\" and then you set the password you actually want when Grafana prompts you to change it. HELP \u2013 I forgot my Grafana admin password! Assuming your IOTstack is up, the magic incantation is: $ docker exec grafana grafana-cli --homepath \"/usr/share/grafana\" admin reset-admin-password \"admin\" Then, use a browser to connect to your Raspberry Pi on port 3000. Grafana will: Expect you login as user \"admin\" with password \"admin\"; and then Force you to change the default password to something else. This magic incantation assumes that your administrative username is \"admin\". If you ignored the advice above and changed the administator username to something else then all bets are off. It might work anyway but we haven't tested it. Sorry. But that's why we said changing the username was not recommended. Overriding Grafana settings Grafana documentation contains a list of settings . Settings are described in terms of how they appear in \".ini\" files. An example of the sort of thing you might want to do is to enable anonymous access to your Grafana dashboards. The Grafana documentation describes this in \".ini\" format as: [auth.anonymous] enabled = true # Organization name that should be used for unauthenticated users org_name = Main Org. # Role for unauthenticated users, other valid values are `Editor` and `Admin` org_role = Viewer \".ini\" format is not really appropriate in a Docker context. Instead, you use environment variables to override Docker's settings. Environment variables are placed in ~/IOTstack/services/grafana/grafana.env . You need to convert \".ini\" format to environment variable syntax. The rules are: Start with \"GF_\", then Append the [section name], replacing any periods with underscores, then Append the section key \"as is\", then Append an \"=\", then Append the right hand side in quotes. Applying those rules gets you: GF_AUTH_ANONYMOUS_ENABLED=\"true\" GF_AUTH_ANONYMOUS_ORG_NAME=\"Main Org.\" GF_AUTH_ANONYMOUS_ORG_ROLE=\"Viewer\" It is not strictly necessary to encapsulate every right hand side value in quotes. In the above, both \"true\" and \"Viewer\" would work without quotes, whereas \"Main Org.\" needs quotes because of the embedded space. After you have changed ~/IOTstack/services/grafana/grafana.env , you need to propagate the changes into the Grafana container: $ cd ~/IOTstack $ docker-compose stop grafana $ docker-compose up -d In theory, the second command could be omitted, or both the second and third commands could be replaced with \"docker-compose restart grafana\" but experience suggests stopping the container is more reliable. A slightly more real-world example would involve choosing a different default organisation name for anonymous access. This example uses \"ChezMoi\". First, the environment key needs to be set to that value: GF_AUTH_ANONYMOUS_ORG_NAME=ChezMoi Then that change needs to be propagated into the Grafana container as explained above. Next, Grafana needs to be told that \"ChezMoi\" is the default organisation: Use your browser to login to Grafana as an administrator. From the \"Server Admin\" slide-out menu on the left hand side, choose \"Orgs\". In the list that appears, click on \"Main Org\". This opens an editing panel. Change the \"Name\" field to \"ChezMoi\" and click \"Update\". Sign-out of Grafana. You will be taken back to the login screen. Your URL bar will look something like this: http://myhost.mydomain.com:3000/login 6. Edit the URL to remove the \"login\" suffix and press return. If all your changes were applied successfully, you will have anonymous access and the URL will look something like this: http://myhost.mydomain.com:3000/?orgId=1 HELP \u2013 I made a mess! \"I made a bit of a mess with Grafana. First time user. Steep learning curve. False starts, many. Mistakes, unavoidable. Been there, done that. But now I really need to start from a clean slate. And, yes, I understand there is no undo for this.\" Begin by stopping Grafana: $ cd ~/IOTstack $ docker-compose stop grafana You have two options: Destroy your settings and dashboards but retain any plugins you may have installed: $ sudo rm ~/IOTstack/volumes/grafana/data/grafana.db Nuke everything (triple-check this command before you hit return): $ sudo rm -rf ~/IOTstack/volumes/grafana/data This is where you should edit ~/IOTstack/services/grafana/grafana.env to correct any problems (such as choosing an administrative username other than \"admin\"). When you are ready, bring Grafana back up again: $ cd ~/IOTstack $ docker-compose up -d Grafana will automatically recreate everything it needs. You will be able to login as \"admin/admin\".","title":"Grafana"},{"location":"Grafana/#grafana","text":"","title":"Grafana"},{"location":"Grafana/#references","text":"Docker Website","title":"References"},{"location":"Grafana/#setting-your-time-zone","text":"The default ~/IOTstack/services/grafana/grafana.env contains this line: #TZ=Africa/Johannesburg Uncomment that line and change the right hand side to your own timezone .","title":"Setting your time-zone"},{"location":"Grafana/#security","text":"If Grafana has just been installed but has never been launched then the following will be true: The folder ~/IOTstack/volumes/grafana will not exist; and The file ~/IOTstack/services/grafana/grafana.env will contain these lines: ```","title":"Security"},{"location":"Grafana/#gf_security_admin_useradmin","text":"","title":"GF_SECURITY_ADMIN_USER=admin"},{"location":"Grafana/#gf_security_admin_passwordadmin","text":"``` You should see those lines as documentation rather than something you are being invited to edit. It is telling you that the default administative user for Grafana is \"admin\" and that the default password for that user is \"admin\". If you do not change anything then, when you bring up the stack and use a browser to connect to your Raspberry Pi on port 3000, Grafana will: Expect you to login as user \"admin\" with password \"admin\"; and then Force you to change the default password to something else. Thereafter, you will login as \"admin\" with whatever password you chose. You can change the administrator's password as often as you like via the web UI ( profile button, change password tab). This method (of not touching these two keys in grafana.env ) is the recommended approach. Please try to resist the temptation to fiddle!","title":"GF_SECURITY_ADMIN_PASSWORD=admin"},{"location":"Grafana/#i-want-a-different-admin-username-not-recommended","text":"If, before you bring up the stack for the first time, you do this: GF_SECURITY_ADMIN_USER=jack #GF_SECURITY_ADMIN_PASSWORD=admin then, when you bring up the stack and connect on port 3000, Grafana will: Expect you to login as user \"jack\" with password \"admin\"; and then Force you to change the default password to something else. Thereafter, \"jack\" will be the Grafana administrator and you will login with the password you chose, until you decide to change the password to something else via the web UI. Don't think you can come back later and tweak the Grafana administrator name in the environment variables. It doesn't work that way. It's a one-shot.","title":"I want a different admin username (not recommended)"},{"location":"Grafana/#i-want-a-different-default-admin-password-not-recommended","text":"Well, first off, the two methods above both make you set a different password on first login so there probably isn't much point to this. But, if you really insist\u2026 If, before you bring up the stack for the first time, you do this: #GF_SECURITY_ADMIN_USER=admin GF_SECURITY_ADMIN_PASSWORD=jack then, when you bring up the stack and use a browser to connect to your Raspberry Pi on port 3000, Grafana will expect you to login as user \"admin\" with password \"jack\". Grafana will not force you to change the password on first login but you will still be able to change it via the web UI. But don't think you can come back later and change the password in the environment variables. It doesn't work that way. It's a one-shot.","title":"I want a different default admin password (not recommended)"},{"location":"Grafana/#i-want-to-change-everything-not-recommended","text":"If, before you bring up the stack for the first time, you do this: GF_SECURITY_ADMIN_USER=bill GF_SECURITY_ADMIN_PASSWORD=jack then, when you bring up the stack and use a browser to connect to your Raspberry Pi on port 3000, Grafana will expect you to login as user \"bill\" with password \"jack\". Grafana will not force you to change the password on first login but you will still be able to change it via the web UI. But don't think you can come back later and tweak either the username or password in the environment variables. It doesn't work that way. It's a one-shot.","title":"I want to change everything (not recommended)"},{"location":"Grafana/#distilling-it-down","text":"Before Grafana is launched for the first time: GF_SECURITY_ADMIN_USER has a default value of \"admin\". You can explicitly set it to \"admin\" or some other value. Whatever option you choose then that's the account name of Grafana's administrative user. But choosing any value other than \"admin\" is probably a bad idea. GF_SECURITY_ADMIN_PASSWORD has a default value of \"admin\". You can explicitly set it to \"admin\" or some other value. If its value is \"admin\" then you will be forced to change it the first time you login to Grafana. If its value is something other than \"admin\" then that will be the password until you change it via the web UI. These two environment keys only work for the first launch of Grafana. Once Grafana has been launched, you can never change either the username or the password by editing grafana.env . For this reason, it is better to leave grafana.env in its shrink-wrapped state. Your first login is as \"admin/admin\" and then you set the password you actually want when Grafana prompts you to change it.","title":"Distilling it down"},{"location":"Grafana/#help-i-forgot-my-grafana-admin-password","text":"Assuming your IOTstack is up, the magic incantation is: $ docker exec grafana grafana-cli --homepath \"/usr/share/grafana\" admin reset-admin-password \"admin\" Then, use a browser to connect to your Raspberry Pi on port 3000. Grafana will: Expect you login as user \"admin\" with password \"admin\"; and then Force you to change the default password to something else. This magic incantation assumes that your administrative username is \"admin\". If you ignored the advice above and changed the administator username to something else then all bets are off. It might work anyway but we haven't tested it. Sorry. But that's why we said changing the username was not recommended.","title":"HELP \u2013 I forgot my Grafana admin password!"},{"location":"Grafana/#overriding-grafana-settings","text":"Grafana documentation contains a list of settings . Settings are described in terms of how they appear in \".ini\" files. An example of the sort of thing you might want to do is to enable anonymous access to your Grafana dashboards. The Grafana documentation describes this in \".ini\" format as: [auth.anonymous] enabled = true # Organization name that should be used for unauthenticated users org_name = Main Org. # Role for unauthenticated users, other valid values are `Editor` and `Admin` org_role = Viewer \".ini\" format is not really appropriate in a Docker context. Instead, you use environment variables to override Docker's settings. Environment variables are placed in ~/IOTstack/services/grafana/grafana.env . You need to convert \".ini\" format to environment variable syntax. The rules are: Start with \"GF_\", then Append the [section name], replacing any periods with underscores, then Append the section key \"as is\", then Append an \"=\", then Append the right hand side in quotes. Applying those rules gets you: GF_AUTH_ANONYMOUS_ENABLED=\"true\" GF_AUTH_ANONYMOUS_ORG_NAME=\"Main Org.\" GF_AUTH_ANONYMOUS_ORG_ROLE=\"Viewer\" It is not strictly necessary to encapsulate every right hand side value in quotes. In the above, both \"true\" and \"Viewer\" would work without quotes, whereas \"Main Org.\" needs quotes because of the embedded space. After you have changed ~/IOTstack/services/grafana/grafana.env , you need to propagate the changes into the Grafana container: $ cd ~/IOTstack $ docker-compose stop grafana $ docker-compose up -d In theory, the second command could be omitted, or both the second and third commands could be replaced with \"docker-compose restart grafana\" but experience suggests stopping the container is more reliable. A slightly more real-world example would involve choosing a different default organisation name for anonymous access. This example uses \"ChezMoi\". First, the environment key needs to be set to that value: GF_AUTH_ANONYMOUS_ORG_NAME=ChezMoi Then that change needs to be propagated into the Grafana container as explained above. Next, Grafana needs to be told that \"ChezMoi\" is the default organisation: Use your browser to login to Grafana as an administrator. From the \"Server Admin\" slide-out menu on the left hand side, choose \"Orgs\". In the list that appears, click on \"Main Org\". This opens an editing panel. Change the \"Name\" field to \"ChezMoi\" and click \"Update\". Sign-out of Grafana. You will be taken back to the login screen. Your URL bar will look something like this: http://myhost.mydomain.com:3000/login 6. Edit the URL to remove the \"login\" suffix and press return. If all your changes were applied successfully, you will have anonymous access and the URL will look something like this: http://myhost.mydomain.com:3000/?orgId=1","title":"Overriding Grafana settings"},{"location":"Grafana/#help-i-made-a-mess","text":"\"I made a bit of a mess with Grafana. First time user. Steep learning curve. False starts, many. Mistakes, unavoidable. Been there, done that. But now I really need to start from a clean slate. And, yes, I understand there is no undo for this.\" Begin by stopping Grafana: $ cd ~/IOTstack $ docker-compose stop grafana You have two options: Destroy your settings and dashboards but retain any plugins you may have installed: $ sudo rm ~/IOTstack/volumes/grafana/data/grafana.db Nuke everything (triple-check this command before you hit return): $ sudo rm -rf ~/IOTstack/volumes/grafana/data This is where you should edit ~/IOTstack/services/grafana/grafana.env to correct any problems (such as choosing an administrative username other than \"admin\"). When you are ready, bring Grafana back up again: $ cd ~/IOTstack $ docker-compose up -d Grafana will automatically recreate everything it needs. You will be able to login as \"admin/admin\".","title":"HELP \u2013 I made a mess!"},{"location":"Home-Assistant/","text":"Home assistant References Docker Webpage Hass.io is a home automation platform running on Python 3. It is able to track and control all devices at home and offer a platform for automating control. Port binding is 8123 . Hass.io is exposed to your hosts' network in order to discover devices on your LAN. That means that it does not sit inside docker's network. Menu installation Hass.io now has a seperate installation in the menu. The old version was incorrect and should be removed. Be sure to update you project and install the correct version. You will be asked to select you device type during the installation. Hass.io is no longer dependant on the IOTstack, it has its own service for maintaining its uptime. Installation The installation of Hass.io takes up to 20 minutes (depending on your internet connection). Refrain from restarting your Pi until it had come online and you are able to create a user account Removal To remove Hass.io you first need to stop the service that controls it. Run the following in the terminal: sudo systemctl stop hassio-supervisor.service sudo systemctl disable hassio-supervisor.service This should stop the main service however there are two additional container that still need to be address This will stop the service and disable it from starting on the next boot Next you need to stop the hassio_dns and hassio_supervisor docker stop hassio_supervisor docker stop hassio_dns docker stop homeassistant If you want to remove the containers docker rm hassio_supervisor docker rm hassio_dns docker stop homeassistant After rebooting you should be able to reinstall The stored file are located in /usr/share/hassio which can be removed if you need to Double check with docker ps to see if there are other hassio containers running. They can stopped and removed in the same fashion for the dns and supervisor You can use Portainer to view what is running and clean up the unused images.","title":"Home assistant"},{"location":"Home-Assistant/#home-assistant","text":"","title":"Home assistant"},{"location":"Home-Assistant/#references","text":"Docker Webpage Hass.io is a home automation platform running on Python 3. It is able to track and control all devices at home and offer a platform for automating control. Port binding is 8123 . Hass.io is exposed to your hosts' network in order to discover devices on your LAN. That means that it does not sit inside docker's network.","title":"References"},{"location":"Home-Assistant/#menu-installation","text":"Hass.io now has a seperate installation in the menu. The old version was incorrect and should be removed. Be sure to update you project and install the correct version. You will be asked to select you device type during the installation. Hass.io is no longer dependant on the IOTstack, it has its own service for maintaining its uptime.","title":"Menu installation"},{"location":"Home-Assistant/#installation","text":"The installation of Hass.io takes up to 20 minutes (depending on your internet connection). Refrain from restarting your Pi until it had come online and you are able to create a user account","title":"Installation"},{"location":"Home-Assistant/#removal","text":"To remove Hass.io you first need to stop the service that controls it. Run the following in the terminal: sudo systemctl stop hassio-supervisor.service sudo systemctl disable hassio-supervisor.service This should stop the main service however there are two additional container that still need to be address This will stop the service and disable it from starting on the next boot Next you need to stop the hassio_dns and hassio_supervisor docker stop hassio_supervisor docker stop hassio_dns docker stop homeassistant If you want to remove the containers docker rm hassio_supervisor docker rm hassio_dns docker stop homeassistant After rebooting you should be able to reinstall The stored file are located in /usr/share/hassio which can be removed if you need to Double check with docker ps to see if there are other hassio containers running. They can stopped and removed in the same fashion for the dns and supervisor You can use Portainer to view what is running and clean up the unused images.","title":"Removal"},{"location":"Home/","text":"Wiki The README is moving to the Wiki, It's easier to add content and example to the Wiki vs the README.md Getting Started Updating the project How the script works Understanding Containers Docker Commands Docker Networks Containers Portainer Portainer Agent Node-RED Grafana Mosquitto PostgreSQL Adminer openHAB Home Assistant Pi-Hole zigbee2MQTT Plex TasmoAdmin RTL_433 EspruinoHub (testing) Next-Cloud MariaDB MotionEye Blynk Server diyHue Python Custom containers Native installs RTL_433 RPIEasy Backups Docker backups Recovery (coming soon) Remote Access VPN and Dynamic DNS x2go Miscellaneous log2ram Dropbox-Uploader","title":"Wiki"},{"location":"Home/#wiki","text":"The README is moving to the Wiki, It's easier to add content and example to the Wiki vs the README.md Getting Started Updating the project How the script works Understanding Containers","title":"Wiki"},{"location":"Home/#docker","text":"Commands Docker Networks","title":"Docker"},{"location":"Home/#containers","text":"Portainer Portainer Agent Node-RED Grafana Mosquitto PostgreSQL Adminer openHAB Home Assistant Pi-Hole zigbee2MQTT Plex TasmoAdmin RTL_433 EspruinoHub (testing) Next-Cloud MariaDB MotionEye Blynk Server diyHue Python Custom containers","title":"Containers"},{"location":"Home/#native-installs","text":"RTL_433 RPIEasy","title":"Native installs"},{"location":"Home/#backups","text":"Docker backups Recovery (coming soon)","title":"Backups"},{"location":"Home/#remote-access","text":"VPN and Dynamic DNS x2go","title":"Remote Access"},{"location":"Home/#miscellaneous","text":"log2ram Dropbox-Uploader","title":"Miscellaneous"},{"location":"How-the-script-works/","text":"How the script works The build script creates the ./services directory and populates it from the template file in .templates . The script then appends the text withing each service.yml file to the docker-compose.yml . When the stack is rebuild the menu doesn not overwrite the service folder if it already exists. Make sure to sync any alterations you have made to the docker-compose.yml file with the respective service.yml so that on your next build your changes pull through. The .gitignore file is setup such that if you do a git pull origin master it does not overwrite the files you have already created. Because the build script does not overwrite your service directory any changes in the .templates directory will have no affect on the services you have already made. You will need to move your service folder out to get the latest version of the template.","title":"How the script works"},{"location":"How-the-script-works/#how-the-script-works","text":"The build script creates the ./services directory and populates it from the template file in .templates . The script then appends the text withing each service.yml file to the docker-compose.yml . When the stack is rebuild the menu doesn not overwrite the service folder if it already exists. Make sure to sync any alterations you have made to the docker-compose.yml file with the respective service.yml so that on your next build your changes pull through. The .gitignore file is setup such that if you do a git pull origin master it does not overwrite the files you have already created. Because the build script does not overwrite your service directory any changes in the .templates directory will have no affect on the services you have already made. You will need to move your service folder out to get the latest version of the template.","title":"How the script works"},{"location":"InfluxDB/","text":"InfluxDB References Docker Website Security The credentials and default database name for influxdb are stored in the file called influxdb/influx.env . The default username and password is set to \"nodered\" for both. It is HIGHLY recommended that you change them. The environment file contains several commented out options allowing you to set several access options such as default admin user credentials as well as the default database name. Any change to the environment file will require a restart of the service. To access the terminal for influxdb execute ./services/influxdb/terminal.sh . Here you can set additional parameters or create other databases.","title":"InfluxDB"},{"location":"InfluxDB/#influxdb","text":"","title":"InfluxDB"},{"location":"InfluxDB/#references","text":"Docker Website","title":"References"},{"location":"InfluxDB/#security","text":"The credentials and default database name for influxdb are stored in the file called influxdb/influx.env . The default username and password is set to \"nodered\" for both. It is HIGHLY recommended that you change them. The environment file contains several commented out options allowing you to set several access options such as default admin user credentials as well as the default database name. Any change to the environment file will require a restart of the service. To access the terminal for influxdb execute ./services/influxdb/terminal.sh . Here you can set additional parameters or create other databases.","title":"Security"},{"location":"MariaDB/","text":"Source Docker hub Webpage About MariaDB is a fork of MySQL. This is an unofficial image provided by linuxserver.io because there is no official image for arm Conneting to the DB The port is 3306. It exists inside the docker network so you can connect via mariadb:3306 for internal connections. For external connections use <your Pis IP>:3306 Setup Before starting the stack edit the ./services/mariadb/mariadb.env file and set your access details. This is optional however you will only have one shot at the preconfig. If you start the container without setting the passwords then you will have to either delete its volume directory or enter the terminal and change manually The env file has three commented fields for credentials, either all three must be commented or un-commented. You can't have only one or two, its all or nothing. Terminal A terminal is provided to access mariadb by the cli. execute ./services/maraidb/terminal.sh . You will need to run mysql -uroot -p to enter mariadbs interface","title":"MariaDB"},{"location":"MariaDB/#source","text":"Docker hub Webpage","title":"Source"},{"location":"MariaDB/#about","text":"MariaDB is a fork of MySQL. This is an unofficial image provided by linuxserver.io because there is no official image for arm","title":"About"},{"location":"MariaDB/#conneting-to-the-db","text":"The port is 3306. It exists inside the docker network so you can connect via mariadb:3306 for internal connections. For external connections use <your Pis IP>:3306","title":"Conneting to the DB"},{"location":"MariaDB/#setup","text":"Before starting the stack edit the ./services/mariadb/mariadb.env file and set your access details. This is optional however you will only have one shot at the preconfig. If you start the container without setting the passwords then you will have to either delete its volume directory or enter the terminal and change manually The env file has three commented fields for credentials, either all three must be commented or un-commented. You can't have only one or two, its all or nothing.","title":"Setup"},{"location":"MariaDB/#terminal","text":"A terminal is provided to access mariadb by the cli. execute ./services/maraidb/terminal.sh . You will need to run mysql -uroot -p to enter mariadbs interface","title":"Terminal"},{"location":"Misc/","text":"Miscellaneous log2ram https://github.com/azlux/log2ram One of the drawbacks of an sd card is that it has a limited lifespan. One way to reduce the load on the sd card is to move your log files to RAM. log2ram is a convenient tool to simply set this up. It can be installed from the miscellaneous menu. Dropbox-Uploader This a great utility to easily upload data from your PI to the cloud. https://magpi.raspberrypi.org/articles/dropbox-raspberry-pi The MagPi has an excellent explanation of the process of setting up the Dropbox API. Dropbox-Uploader is used in the backup script.","title":"Miscellaneous"},{"location":"Misc/#miscellaneous","text":"","title":"Miscellaneous"},{"location":"Misc/#log2ram","text":"https://github.com/azlux/log2ram One of the drawbacks of an sd card is that it has a limited lifespan. One way to reduce the load on the sd card is to move your log files to RAM. log2ram is a convenient tool to simply set this up. It can be installed from the miscellaneous menu.","title":"log2ram"},{"location":"Misc/#dropbox-uploader","text":"This a great utility to easily upload data from your PI to the cloud. https://magpi.raspberrypi.org/articles/dropbox-raspberry-pi The MagPi has an excellent explanation of the process of setting up the Dropbox API. Dropbox-Uploader is used in the backup script.","title":"Dropbox-Uploader"},{"location":"Mosquitto/","text":"Mosquitto References Docker Website mosquitto.conf documentation Setting up passwords video Definitions docker-compose.yml \u21d2 ~/IOTstack/docker-compose.yml mosquitto.conf \u21d2 ~/IOTstack/services/mosquitto/mosquitto.conf mosquitto.log \u21d2 ~/IOTstack/volumes/mosquitto/log/mosquitto.log volumes/mosquitto \u21d2 ~/IOTstack/volumes/mosquitto/ Logging Mosquitto logging is controlled by mosquitto.conf . This is the default configuration: #log_dest file /mosquitto/log/mosquitto.log # To avoid flash wearing log_dest stdout When log_dest is set to stdout , you inspect Mosquitto's logs like this: $ docker logs mosquitto Logs written to stdout are ephemeral and will disappear when your IOTstack is restarted but this configuration reduces wear and tear on your SD card. The alternative, which may be more appropriate if you are running on an SSD or HD, is to change mosquitto.conf to be like this: log_dest file /mosquitto/log/mosquitto.log # To avoid flash wearing #log_dest stdout and then restart Mosquitto: $ cd ~/IOTstack $ docker-compose restart mosquitto With this configuration, you inspect Mosquitto's logs like this: $ tail ~/IOTstack/volumes/mosquitto/log/mosquitto.log Logs written to mosquitto.log do not disappear when your IOTstack is restarted. They persist until you take action to prune the file. Security By default, the Mosquitto container has no password. You can leave it that way if you like but it's always a good idea to secure your services. Assuming your IOTstack is running: Open a shell in the mosquitto container: $ docker exec -it mosquitto sh In the following, replace \u00abMYUSER\u00bb with the username you want to use for controlling access to Mosquitto and then run these commands: $ mosquitto_passwd -c /mosquitto/pwfile/pwfile \u00abMYUSER\u00bb $ exit mosquitto_passwd will ask you to type a password and confirm it. The path on the right hand side of: -c /mosquitto/pwfile/pwfile is inside the container. Outside the container, it maps to: ~/IOTstack/volumes/mosquitto/pwfile/pwfile You should be able to see the result of setting a username and password like this: $ cat ~/IOTstack/volumes/mosquitto/pwfile/pwfile MYUSER:$6$lBYlxjWtLON0fm96$3qgcEyr/nKvxk3C2Jk36kkILJK7nLdIeLhuywVOVkVbJUjBeqUmCLOA/T6qAq2+hyyJdZ52ALTi+onMEEaM0qQ== $ Open mosquitto.conf in a text editor. Find this line: ``` password_file /mosquitto/pwfile/pwfile ``` Remove the # in front of password_file. Save. Restart Mosquitto: $ cd ~/IOTstack $ docker-compose restart mosquitto Use the new credentials where necessary (eg Node-Red). Notes: You can revert to password-disabled state by going back to step 3, re-inserting the \"#\", then restarting Mosquitto as per step 4. If mosquitto keeps restarting after you implement password checking, the most likely explanation will be something wrong with the password file. Implement the advice in the previous note. Running as root By default, the Mosquitto container is launched as root but then downgrades its privileges to run as user ID 1883. Mosquitto is unusual because most containers just accept the privileges they were launched with. In most cases, that means containers run as root. Don't make the mistake of thinking this means that processes running inside containers can do whatever they like to your host system. A process inside a container is contained . What a process can affect outside its container is governed by the port, device and volume mappings you see in the docker-compose.yml . You can check how mosquitto has been launched like this: $ ps -eo euser,ruser,suser,fuser,comm | grep mosquitto EUSER RUSER SUSER FUSER COMMAND 1883 1883 1883 1883 mosquitto If you have a use-case that needs Mosquitto to run with root privileges: Open docker-compose.yml in a text editor and find this: mosquitto: \u2026 [snip] \u2026 user: \"1883\" change it to: mosquitto: \u2026 [snip] \u2026 user: \"0\" Edit mosquitto.conf to add this line: user root Apply the change: $ cd ~/IOTstack $ docker-compose stop mosquitto $ docker-compose up -d A clean install of Mosquitto via the IOTstack menu sets everything in volumes/mosquitto to user and group 1883. That permission structure will still work if you change Mosquitto to run with root privileges. However, running as root may have the side effect of changing privilege levels within volumes/mosquitto . Keep this in mind if you decide to switch back to running Mosquitto as user 1883 because it is less likely to work.","title":"Mosquitto"},{"location":"Mosquitto/#mosquitto","text":"","title":"Mosquitto"},{"location":"Mosquitto/#references","text":"Docker Website mosquitto.conf documentation Setting up passwords video","title":"References"},{"location":"Mosquitto/#definitions","text":"docker-compose.yml \u21d2 ~/IOTstack/docker-compose.yml mosquitto.conf \u21d2 ~/IOTstack/services/mosquitto/mosquitto.conf mosquitto.log \u21d2 ~/IOTstack/volumes/mosquitto/log/mosquitto.log volumes/mosquitto \u21d2 ~/IOTstack/volumes/mosquitto/","title":"Definitions"},{"location":"Mosquitto/#logging","text":"Mosquitto logging is controlled by mosquitto.conf . This is the default configuration: #log_dest file /mosquitto/log/mosquitto.log # To avoid flash wearing log_dest stdout When log_dest is set to stdout , you inspect Mosquitto's logs like this: $ docker logs mosquitto Logs written to stdout are ephemeral and will disappear when your IOTstack is restarted but this configuration reduces wear and tear on your SD card. The alternative, which may be more appropriate if you are running on an SSD or HD, is to change mosquitto.conf to be like this: log_dest file /mosquitto/log/mosquitto.log # To avoid flash wearing #log_dest stdout and then restart Mosquitto: $ cd ~/IOTstack $ docker-compose restart mosquitto With this configuration, you inspect Mosquitto's logs like this: $ tail ~/IOTstack/volumes/mosquitto/log/mosquitto.log Logs written to mosquitto.log do not disappear when your IOTstack is restarted. They persist until you take action to prune the file.","title":"Logging"},{"location":"Mosquitto/#security","text":"By default, the Mosquitto container has no password. You can leave it that way if you like but it's always a good idea to secure your services. Assuming your IOTstack is running: Open a shell in the mosquitto container: $ docker exec -it mosquitto sh In the following, replace \u00abMYUSER\u00bb with the username you want to use for controlling access to Mosquitto and then run these commands: $ mosquitto_passwd -c /mosquitto/pwfile/pwfile \u00abMYUSER\u00bb $ exit mosquitto_passwd will ask you to type a password and confirm it. The path on the right hand side of: -c /mosquitto/pwfile/pwfile is inside the container. Outside the container, it maps to: ~/IOTstack/volumes/mosquitto/pwfile/pwfile You should be able to see the result of setting a username and password like this: $ cat ~/IOTstack/volumes/mosquitto/pwfile/pwfile MYUSER:$6$lBYlxjWtLON0fm96$3qgcEyr/nKvxk3C2Jk36kkILJK7nLdIeLhuywVOVkVbJUjBeqUmCLOA/T6qAq2+hyyJdZ52ALTi+onMEEaM0qQ== $ Open mosquitto.conf in a text editor. Find this line: ```","title":"Security"},{"location":"Mosquitto/#password_file-mosquittopwfilepwfile","text":"``` Remove the # in front of password_file. Save. Restart Mosquitto: $ cd ~/IOTstack $ docker-compose restart mosquitto Use the new credentials where necessary (eg Node-Red). Notes: You can revert to password-disabled state by going back to step 3, re-inserting the \"#\", then restarting Mosquitto as per step 4. If mosquitto keeps restarting after you implement password checking, the most likely explanation will be something wrong with the password file. Implement the advice in the previous note.","title":"password_file /mosquitto/pwfile/pwfile"},{"location":"Mosquitto/#running-as-root","text":"By default, the Mosquitto container is launched as root but then downgrades its privileges to run as user ID 1883. Mosquitto is unusual because most containers just accept the privileges they were launched with. In most cases, that means containers run as root. Don't make the mistake of thinking this means that processes running inside containers can do whatever they like to your host system. A process inside a container is contained . What a process can affect outside its container is governed by the port, device and volume mappings you see in the docker-compose.yml . You can check how mosquitto has been launched like this: $ ps -eo euser,ruser,suser,fuser,comm | grep mosquitto EUSER RUSER SUSER FUSER COMMAND 1883 1883 1883 1883 mosquitto If you have a use-case that needs Mosquitto to run with root privileges: Open docker-compose.yml in a text editor and find this: mosquitto: \u2026 [snip] \u2026 user: \"1883\" change it to: mosquitto: \u2026 [snip] \u2026 user: \"0\" Edit mosquitto.conf to add this line: user root Apply the change: $ cd ~/IOTstack $ docker-compose stop mosquitto $ docker-compose up -d A clean install of Mosquitto via the IOTstack menu sets everything in volumes/mosquitto to user and group 1883. That permission structure will still work if you change Mosquitto to run with root privileges. However, running as root may have the side effect of changing privilege levels within volumes/mosquitto . Keep this in mind if you decide to switch back to running Mosquitto as user 1883 because it is less likely to work.","title":"Running as root"},{"location":"MotionEye/","text":"MotionQye References Website About MotionEye is a camera/webcam package. The port is set to 8765 Config This is the yml entry. Notice that the devices is commented out. This is because if you don't have a camera attached then it will fail to start. Uncomment if you need to. This is for a Pi camera, you will need to add additional lines for usb cameras motioneye: image: \"ccrisan/motioneye:master-armhf\" container_name: \"motioneye\" restart: unless-stopped ports: - 8765:8765 - 8081:8081 volumes: - /etc/localtime:/etc/localtime:ro - ./volumes/motioneye/etc_motioneye:/etc/motioneye - ./volumes/motioneye/var_lib_motioneye:/var/lib/motioneye #devices: # - \"/dev/video0:/dev/video0\" Login Details On first login you will be asked for login details. The default user is admin (all lowercase) with no password Storage By default local camera data will be stored in /var/lib/motioneye/camera_name in the container which equates to the following: Remote motioneye If you have connected to a remote motion eye note that the directory is on that device and has nothing to do with the container.","title":"MotionQye"},{"location":"MotionEye/#motionqye","text":"","title":"MotionQye"},{"location":"MotionEye/#references","text":"Website","title":"References"},{"location":"MotionEye/#about","text":"MotionEye is a camera/webcam package. The port is set to 8765","title":"About"},{"location":"MotionEye/#config","text":"This is the yml entry. Notice that the devices is commented out. This is because if you don't have a camera attached then it will fail to start. Uncomment if you need to. This is for a Pi camera, you will need to add additional lines for usb cameras motioneye: image: \"ccrisan/motioneye:master-armhf\" container_name: \"motioneye\" restart: unless-stopped ports: - 8765:8765 - 8081:8081 volumes: - /etc/localtime:/etc/localtime:ro - ./volumes/motioneye/etc_motioneye:/etc/motioneye - ./volumes/motioneye/var_lib_motioneye:/var/lib/motioneye #devices: # - \"/dev/video0:/dev/video0\"","title":"Config"},{"location":"MotionEye/#login-details","text":"On first login you will be asked for login details. The default user is admin (all lowercase) with no password","title":"Login Details"},{"location":"MotionEye/#storage","text":"By default local camera data will be stored in /var/lib/motioneye/camera_name in the container which equates to the following:","title":"Storage"},{"location":"MotionEye/#remote-motioneye","text":"If you have connected to a remote motion eye note that the directory is on that device and has nothing to do with the container.","title":"Remote motioneye"},{"location":"Native-RTL_433/","text":"Native RTL_433 RTL_433 can be installed from the \"Native install sections\" This video demonstrates how to use RTL_433","title":"Native RTL_433"},{"location":"Native-RTL_433/#native-rtl_433","text":"RTL_433 can be installed from the \"Native install sections\" This video demonstrates how to use RTL_433","title":"Native RTL_433"},{"location":"Networking/","text":"Networking The docker-compose instruction creates an internal network for the containers to communicate in, the ports get exposed to the PI's IP address when you want to connect from outside. It also creates a \"DNS\" the name being the container name. So it is important to note that when one container talks to another they talk by name. All the containers names are lowercase like nodered, influxdb... An easy way to find out your IP is by typing ip address in the terminal and look next to eth0 or wlan0 for your IP. It is highly recommended that you set a static IP for your PI or at least reserve an IP on your router so that you know it Check the docker-compose.yml to see which ports have been used Examples You want to connect your nodered to your mqtt server. In nodered drop an mqtt node, when you need to specify the address type mosquitto You want to connect to your influxdb from grafana. You are in the Docker network and you need to use the name of the Container. The address you specify in the grafana is http://influxdb:8086 You want to connect to the web interface of grafana from your laptop. Now you are outside the container environment you type PI's IP eg 192.168.n.m:3000 Ports Many containers try to use popular ports such as 80,443,8080. For example openHAB and Adminer both want to use port 8080 for their web interface. Adminer's port has been moved 9080 to accommodate this. Please check the description of the container in the README to see if there are any changes as they may not be the same as the port you are used to. Port mapping is done in the docker-compose.yml file. Each service should have a section that reads like this: ports: - HOST_PORT:CONTAINER_PORT For adminer: ports: - 9080:8080 Port 9080 on Host Pi is mapped to port 8080 of the container. Therefore 127.0.0.1:8080 will take you to openHAB, where 127.0.0.1:9080 will take you to adminer","title":"Networking"},{"location":"Networking/#networking","text":"The docker-compose instruction creates an internal network for the containers to communicate in, the ports get exposed to the PI's IP address when you want to connect from outside. It also creates a \"DNS\" the name being the container name. So it is important to note that when one container talks to another they talk by name. All the containers names are lowercase like nodered, influxdb... An easy way to find out your IP is by typing ip address in the terminal and look next to eth0 or wlan0 for your IP. It is highly recommended that you set a static IP for your PI or at least reserve an IP on your router so that you know it Check the docker-compose.yml to see which ports have been used","title":"Networking"},{"location":"Networking/#examples","text":"You want to connect your nodered to your mqtt server. In nodered drop an mqtt node, when you need to specify the address type mosquitto You want to connect to your influxdb from grafana. You are in the Docker network and you need to use the name of the Container. The address you specify in the grafana is http://influxdb:8086 You want to connect to the web interface of grafana from your laptop. Now you are outside the container environment you type PI's IP eg 192.168.n.m:3000","title":"Examples"},{"location":"Networking/#ports","text":"Many containers try to use popular ports such as 80,443,8080. For example openHAB and Adminer both want to use port 8080 for their web interface. Adminer's port has been moved 9080 to accommodate this. Please check the description of the container in the README to see if there are any changes as they may not be the same as the port you are used to. Port mapping is done in the docker-compose.yml file. Each service should have a section that reads like this: ports: - HOST_PORT:CONTAINER_PORT For adminer: ports: - 9080:8080 Port 9080 on Host Pi is mapped to port 8080 of the container. Therefore 127.0.0.1:8080 will take you to openHAB, where 127.0.0.1:9080 will take you to adminer","title":"Ports"},{"location":"NextCloud/","text":"Next Cloud DO NOT EXPOSE PORT 80 TO THE WEB It is a very bad idea to expose unencrypted traffic to the web. You will need to use a reverse-proxy to ensure your password is not stolen and your account hacked. I'm still working on getting a good encrypted reverse proxy working. However in the interim you can use a VPN tunnel like OpenVPN or Zerotier to securely connect to your private cloud Backups Nextcloud has been excluded from the docker_backup script due to its potential size. Once I've found a better way of backing it up I will add a dedicated script for it. Setup Next-Cloud recommends using MySQL/MariaDB for the accounts and file list. The alternative is to use SQLite however they strongly discourage using it This is the service yml. Notice that there are in fact two containers, one for the db and the other for the cloud itself. You will need to change the passwords before starting the stack (remember to change the docker-compose.yml and ./services/nextcloud/service.yml), if you dont you will need to delete the volume directory and start again. nextcloud: image: nextcloud container_name: nextcloud ports: - 9321:80 volumes: - ./volumes/nextcloud/html:/var/www/html restart: unless-stopped depends_on: - nextcloud_db nextcloud_db: image: linuxserver/mariadb container_name: nextcloud_db volumes: - ./volumes/nextcloud/db:/config environment: - MYSQL_ROOT_PASSWORD=stronger_password - MYSQL_PASSWORD=strong_password - MYSQL_DATABASE=nextcloud - MYSQL_USER=nextcloud The port is 9321 click on the storage options, select maraiadb/mysql and fill in the details as follows Note that you data will be stored in ./volumes/nextcloud/html/data/{account} Also note that file permissions are \"www-data\" so you cant simply copy data into this folder directly, you should use the web interface or the app. It would be a good idea to mount an external drive to store the data in rather than on your sd card. details to follow shortly. Something like: The external drive will have to be an ext4 formatted drive because smb, fat32 and NTFS can't handle linux file permissions. If the permissions aren't set to \"www-data\" then the container wont be able to write to the disk. Just a warning: If your database gets corrupted then your nextcloud is pretty much stuffed","title":"Next Cloud"},{"location":"NextCloud/#next-cloud","text":"","title":"Next Cloud"},{"location":"NextCloud/#do-not-expose-port-80-to-the-web","text":"It is a very bad idea to expose unencrypted traffic to the web. You will need to use a reverse-proxy to ensure your password is not stolen and your account hacked. I'm still working on getting a good encrypted reverse proxy working. However in the interim you can use a VPN tunnel like OpenVPN or Zerotier to securely connect to your private cloud","title":"DO NOT EXPOSE PORT 80 TO THE WEB"},{"location":"NextCloud/#backups","text":"Nextcloud has been excluded from the docker_backup script due to its potential size. Once I've found a better way of backing it up I will add a dedicated script for it.","title":"Backups"},{"location":"NextCloud/#setup","text":"Next-Cloud recommends using MySQL/MariaDB for the accounts and file list. The alternative is to use SQLite however they strongly discourage using it This is the service yml. Notice that there are in fact two containers, one for the db and the other for the cloud itself. You will need to change the passwords before starting the stack (remember to change the docker-compose.yml and ./services/nextcloud/service.yml), if you dont you will need to delete the volume directory and start again. nextcloud: image: nextcloud container_name: nextcloud ports: - 9321:80 volumes: - ./volumes/nextcloud/html:/var/www/html restart: unless-stopped depends_on: - nextcloud_db nextcloud_db: image: linuxserver/mariadb container_name: nextcloud_db volumes: - ./volumes/nextcloud/db:/config environment: - MYSQL_ROOT_PASSWORD=stronger_password - MYSQL_PASSWORD=strong_password - MYSQL_DATABASE=nextcloud - MYSQL_USER=nextcloud The port is 9321 click on the storage options, select maraiadb/mysql and fill in the details as follows Note that you data will be stored in ./volumes/nextcloud/html/data/{account} Also note that file permissions are \"www-data\" so you cant simply copy data into this folder directly, you should use the web interface or the app. It would be a good idea to mount an external drive to store the data in rather than on your sd card. details to follow shortly. Something like: The external drive will have to be an ext4 formatted drive because smb, fat32 and NTFS can't handle linux file permissions. If the permissions aren't set to \"www-data\" then the container wont be able to write to the disk. Just a warning: If your database gets corrupted then your nextcloud is pretty much stuffed","title":"Setup"},{"location":"Node-RED/","text":"Node-RED References Docker website Build warning The Node-RED build will complain about several issues. This is completely normal behaviour. SQLite Thanks to @fragolinux the SQLite node will install now. WARNING it will output many error and will look as if it has gotten stuck. Just give it time and it will continue. GPIO To communicate to your Pi's GPIO you need to use the node-red-node-pi-gpiod node. It allowes you to connect to multiple Pis from the same nodered service. You need to make sure that pigpdiod is running. The recommended method is listed here You run the following command sudo nano /etc/rc.local and add the line /usr/bin/pigpiod above exit 0 and reboot the Pi. There is an option to secure the service see the writeup for further instuctions. Fot the Rpi Image you will also need to update to the most recent version sudo apt-get update sudo apt-get install pigpio python-pigpio python3-pigpio Drop the gpio node and use your Pi's IP. Example: 192.168.1.123 (127.0.0.1 won't work because this is the local address of every computer'.) Securing Node-RED To secure Node-RED you need a password hash. There is a terminal script ./services/nodered/terminal.sh execute it to get into the terminal. Copy the helper text node -e ..... PASSWORD , paste it and change your password to get a hash. Open the file ./volumes/nodered/data/settings.js and follow the writeup on https://nodered.org/docs/user-guide/runtime/securing-node-red for further instructions Sharing files between Node-RED and the host Containers run in a sandboxed environment they can't see the host (the Pi itself) file system. This presents a problem if you want to read a file directly to the host from inside the container. Fortunately there is a method, the containers have been set up with volume mapping. The volume maps a specific directory or file from the host file system into the container. Therefore if you write to that directory both the host and the container can see the files. Consider the following: The docker-compose.yml file shows the following for Node-RED volumes: - ./volumes/nodered/data:/data If inside Node-RED you were to write to the /data folder then the host would see it in ~/IOTstack/volumes/nodered/data (the ./volumes above implies relative to the docker-compose.yml file) The flow writes the file /data/test.txt and it is visible in the host as ~/IOTstack/volumes/nodered/data/test.txt Remember, files and directories in the volume are persistent between restarts. If you save your data elsewhere it will be destroyed should you restart. Creating a subdirectory in volume i.e. /data/storage/ would be advised Using Bluetooth In order to allow Node-RED to access the Pi's Bluetooth module the docker-comose.yml file needs to be modified to allow it access. network_mode: \"host\" needs to be added (make sure the indentation is correct, us spaces not tabs): nodered: container_name: nodered build: ./services/nodered/. restart: unless-stopped user: \"0\" network_mode: \"host\" By activating host mode the Node-RED container can no longer access containers by name http://influxdb:8086 will no longer work. Node-RED thinks it now is the host and therefore access to the following services will look as follows: * influxdb http://127.0.0.1:8086 * GPIO 127.0.0.1 port 8888 * MQTT 127.0.0.1 Unused node in Protainer Portainer will report that the nodered image is unsed, this is normal due to the method used build the image. This is normal behavior. It is not advised to remove it as it is used as the base for the iotstack_nodered image, you will need to redownload it should you rebuild the nodered image. Running the exec node against the host Pi Due to the isolation between containers and the host the exec node will run against the container. There is a solution to work around this. You can use ssh to execute a script on the pi. It requires a little setup but is possible. For this example I'll be running a simple script called test.sh I create a file called test.sh in my IOTstack directory with nano The contents are as follows: #!/bin/bash echo \"hello\" exit 0 The exit 0 will stop the exec node from reporting an issue. Its a good idea to add the shebang at the top. make it executable with chmod +x test.sh This nodered running open the nodered terminal with ./services/nodered/terminal.sh or docker exec -it nodered /bin/bash or use portainer create the ssh folder in the data directory (the /data directory is persistently mapped volume) mkdir -p /data/ssh create key, this will require naming the output file ssh-keygen -f /data/ssh/nodered put in any additional config you want key type strength copy the key to the Pi. When asked for a password leave it blank copy the ssh-key to your pi ssh-copy-id -i /data/ssh/nodered pi@192.168.x.x replace with your static IP address. You will have to reply yes to the prompt. You may also see an error referring to regular expressions however you can ignore it. now to execute a script on the pi run ssh -i /data/ssh/nodered pi@192.168.x.x /home/pi/IOTstack/test.sh type exit to leave the terminal (you could also restart your pi with ssh -i /data/ssh/nodered pi@192.168.x.x sudo reboot ) in node red in your exec node you can run the command ssh -i /data/ssh/nodered pi@192.168.x.x /home/pi/IOTstack/test.sh other the script or command of your choice","title":"Node-RED"},{"location":"Node-RED/#node-red","text":"","title":"Node-RED"},{"location":"Node-RED/#references","text":"Docker website","title":"References"},{"location":"Node-RED/#build-warning","text":"The Node-RED build will complain about several issues. This is completely normal behaviour.","title":"Build warning"},{"location":"Node-RED/#sqlite","text":"Thanks to @fragolinux the SQLite node will install now. WARNING it will output many error and will look as if it has gotten stuck. Just give it time and it will continue.","title":"SQLite"},{"location":"Node-RED/#gpio","text":"To communicate to your Pi's GPIO you need to use the node-red-node-pi-gpiod node. It allowes you to connect to multiple Pis from the same nodered service. You need to make sure that pigpdiod is running. The recommended method is listed here You run the following command sudo nano /etc/rc.local and add the line /usr/bin/pigpiod above exit 0 and reboot the Pi. There is an option to secure the service see the writeup for further instuctions. Fot the Rpi Image you will also need to update to the most recent version sudo apt-get update sudo apt-get install pigpio python-pigpio python3-pigpio Drop the gpio node and use your Pi's IP. Example: 192.168.1.123 (127.0.0.1 won't work because this is the local address of every computer'.)","title":"GPIO"},{"location":"Node-RED/#securing-node-red","text":"To secure Node-RED you need a password hash. There is a terminal script ./services/nodered/terminal.sh execute it to get into the terminal. Copy the helper text node -e ..... PASSWORD , paste it and change your password to get a hash. Open the file ./volumes/nodered/data/settings.js and follow the writeup on https://nodered.org/docs/user-guide/runtime/securing-node-red for further instructions","title":"Securing Node-RED"},{"location":"Node-RED/#sharing-files-between-node-red-and-the-host","text":"Containers run in a sandboxed environment they can't see the host (the Pi itself) file system. This presents a problem if you want to read a file directly to the host from inside the container. Fortunately there is a method, the containers have been set up with volume mapping. The volume maps a specific directory or file from the host file system into the container. Therefore if you write to that directory both the host and the container can see the files. Consider the following: The docker-compose.yml file shows the following for Node-RED volumes: - ./volumes/nodered/data:/data If inside Node-RED you were to write to the /data folder then the host would see it in ~/IOTstack/volumes/nodered/data (the ./volumes above implies relative to the docker-compose.yml file) The flow writes the file /data/test.txt and it is visible in the host as ~/IOTstack/volumes/nodered/data/test.txt Remember, files and directories in the volume are persistent between restarts. If you save your data elsewhere it will be destroyed should you restart. Creating a subdirectory in volume i.e. /data/storage/ would be advised","title":"Sharing files between Node-RED and the host"},{"location":"Node-RED/#using-bluetooth","text":"In order to allow Node-RED to access the Pi's Bluetooth module the docker-comose.yml file needs to be modified to allow it access. network_mode: \"host\" needs to be added (make sure the indentation is correct, us spaces not tabs): nodered: container_name: nodered build: ./services/nodered/. restart: unless-stopped user: \"0\" network_mode: \"host\" By activating host mode the Node-RED container can no longer access containers by name http://influxdb:8086 will no longer work. Node-RED thinks it now is the host and therefore access to the following services will look as follows: * influxdb http://127.0.0.1:8086 * GPIO 127.0.0.1 port 8888 * MQTT 127.0.0.1","title":"Using Bluetooth"},{"location":"Node-RED/#unused-node-in-protainer","text":"Portainer will report that the nodered image is unsed, this is normal due to the method used build the image. This is normal behavior. It is not advised to remove it as it is used as the base for the iotstack_nodered image, you will need to redownload it should you rebuild the nodered image.","title":"Unused node in Protainer"},{"location":"Node-RED/#running-the-exec-node-against-the-host-pi","text":"Due to the isolation between containers and the host the exec node will run against the container. There is a solution to work around this. You can use ssh to execute a script on the pi. It requires a little setup but is possible. For this example I'll be running a simple script called test.sh I create a file called test.sh in my IOTstack directory with nano The contents are as follows: #!/bin/bash echo \"hello\" exit 0 The exit 0 will stop the exec node from reporting an issue. Its a good idea to add the shebang at the top. make it executable with chmod +x test.sh This nodered running open the nodered terminal with ./services/nodered/terminal.sh or docker exec -it nodered /bin/bash or use portainer create the ssh folder in the data directory (the /data directory is persistently mapped volume) mkdir -p /data/ssh create key, this will require naming the output file ssh-keygen -f /data/ssh/nodered put in any additional config you want key type strength copy the key to the Pi. When asked for a password leave it blank copy the ssh-key to your pi ssh-copy-id -i /data/ssh/nodered pi@192.168.x.x replace with your static IP address. You will have to reply yes to the prompt. You may also see an error referring to regular expressions however you can ignore it. now to execute a script on the pi run ssh -i /data/ssh/nodered pi@192.168.x.x /home/pi/IOTstack/test.sh type exit to leave the terminal (you could also restart your pi with ssh -i /data/ssh/nodered pi@192.168.x.x sudo reboot ) in node red in your exec node you can run the command ssh -i /data/ssh/nodered pi@192.168.x.x /home/pi/IOTstack/test.sh other the script or command of your choice","title":"Running the exec node against the host Pi"},{"location":"Pi-hole/","text":"Pi-hole Pi-hole is a fantastic utility to reduce ads The interface can be found on \"your_ip\":8089/admin Default password is pihole . This can be changed in the ~/IOTstack/services/pihole/pihole.env file To enable your router to use the pihole container edit your DNS settings on your router to point to your Pi's IP address","title":"Pi-hole"},{"location":"Pi-hole/#pi-hole","text":"Pi-hole is a fantastic utility to reduce ads The interface can be found on \"your_ip\":8089/admin Default password is pihole . This can be changed in the ~/IOTstack/services/pihole/pihole.env file To enable your router to use the pihole container edit your DNS settings on your router to point to your Pi's IP address","title":"Pi-hole"},{"location":"Plex/","text":"Plex References Homepage Docker Web interface The web UI can be found on \"your_ip\":32400/web Mounting an external drive by UUID to the home directory official mounting guide Create a directory in you home directory called mnt with a subdirectory HDD . Follow the instruction above to mount your external drive to /home/pi/mnt/HDD in you fstab edit your docker-compose.yml file under plex and uncomment the volumes for tv series and movies (modify the path to point to your media locations). Run docker-compose up -d to rebuild plex with the new volumes","title":"Plex"},{"location":"Plex/#plex","text":"","title":"Plex"},{"location":"Plex/#references","text":"Homepage Docker","title":"References"},{"location":"Plex/#web-interface","text":"The web UI can be found on \"your_ip\":32400/web","title":"Web interface"},{"location":"Plex/#mounting-an-external-drive-by-uuid-to-the-home-directory","text":"official mounting guide Create a directory in you home directory called mnt with a subdirectory HDD . Follow the instruction above to mount your external drive to /home/pi/mnt/HDD in you fstab edit your docker-compose.yml file under plex and uncomment the volumes for tv series and movies (modify the path to point to your media locations). Run docker-compose up -d to rebuild plex with the new volumes","title":"Mounting an external drive by UUID to the home directory"},{"location":"Portainer-agent/","text":"Portainer agent References Docker Docs About The protainer agent is a great way to add a second docker instance to a existing portainer instance. this allows you to mananage multiple docker enviroments form one prortainer instance Adding to an existing instance When you want to add the the agent to an existing portianer instance. You go to the endpoints tab. Click on Add endpoint Select Agent Enter the name of the agent Enter the url of the endpoint ip-of-agent-instance:9001 Click on add endpoint","title":"Portainer agent"},{"location":"Portainer-agent/#portainer-agent","text":"","title":"Portainer agent"},{"location":"Portainer-agent/#references","text":"Docker Docs","title":"References"},{"location":"Portainer-agent/#about","text":"The protainer agent is a great way to add a second docker instance to a existing portainer instance. this allows you to mananage multiple docker enviroments form one prortainer instance","title":"About"},{"location":"Portainer-agent/#adding-to-an-existing-instance","text":"When you want to add the the agent to an existing portianer instance. You go to the endpoints tab. Click on Add endpoint Select Agent Enter the name of the agent Enter the url of the endpoint ip-of-agent-instance:9001 Click on add endpoint","title":"Adding to an existing instance"},{"location":"Portainer/","text":"Portainer References Docker Website Portainer restart by itself There is an issue with the armhf Portainer image where it randomly restarts. This does not affect its operation. The bug has been reported. About Portainer is a great application for managing Docker. In your web browser navigate to #yourip:9000 . You will be asked to choose a password. In the next window select 'Local' and connect, it shouldn't ask you this again. From here you can play around, click local, and take a look around. This can help you find unused images/containers. On the Containers section, there are 'Quick actions' to view logs and other stats. Note: This can all be done from the CLI but portainer just makes it much much easier. Setup Public IP When you first run Portainer and navigate to the Containers list you will see that there is a clickable link to the ports however this will direct you to 0.0.0.0:port . This is because Portainer doesn't know your IP address. This can be set in the endpoint and set the public IP Forgotten password If you have forgotten the password you created for the container, stop the stack remove portainers volume with sudo rm -r ./volumes/portainer and start the stack. Your browser may get a little confused when it restarts. Just navigate to \"yourip:9000\" (may require more than one attempt) and create your new login details. If it doesn't ask you to connect to the 'Local' docker or shows an empty endpoint just logout and log back in and it will give you the option. From now on it should just work fine.","title":"Portainer"},{"location":"Portainer/#portainer","text":"","title":"Portainer"},{"location":"Portainer/#references","text":"Docker Website","title":"References"},{"location":"Portainer/#portainer-restart-by-itself","text":"There is an issue with the armhf Portainer image where it randomly restarts. This does not affect its operation. The bug has been reported.","title":"Portainer restart by itself"},{"location":"Portainer/#about","text":"Portainer is a great application for managing Docker. In your web browser navigate to #yourip:9000 . You will be asked to choose a password. In the next window select 'Local' and connect, it shouldn't ask you this again. From here you can play around, click local, and take a look around. This can help you find unused images/containers. On the Containers section, there are 'Quick actions' to view logs and other stats. Note: This can all be done from the CLI but portainer just makes it much much easier.","title":"About"},{"location":"Portainer/#setup-public-ip","text":"When you first run Portainer and navigate to the Containers list you will see that there is a clickable link to the ports however this will direct you to 0.0.0.0:port . This is because Portainer doesn't know your IP address. This can be set in the endpoint and set the public IP","title":"Setup Public IP"},{"location":"Portainer/#forgotten-password","text":"If you have forgotten the password you created for the container, stop the stack remove portainers volume with sudo rm -r ./volumes/portainer and start the stack. Your browser may get a little confused when it restarts. Just navigate to \"yourip:9000\" (may require more than one attempt) and create your new login details. If it doesn't ask you to connect to the 'Local' docker or shows an empty endpoint just logout and log back in and it will give you the option. From now on it should just work fine.","title":"Forgotten password"},{"location":"PostgreSQL/","text":"PostgreSQL References Docker Website About PostgreSQL is an SQL server, for those that need an SQL database. The database credentials can be found in the file ./volumes/postgres/postgres.env . It is highly recommended to change the user, password and default database","title":"PostgreSQL"},{"location":"PostgreSQL/#postgresql","text":"","title":"PostgreSQL"},{"location":"PostgreSQL/#references","text":"Docker Website","title":"References"},{"location":"PostgreSQL/#about","text":"PostgreSQL is an SQL server, for those that need an SQL database. The database credentials can be found in the file ./volumes/postgres/postgres.env . It is highly recommended to change the user, password and default database","title":"About"},{"location":"Python/","text":"Python Docker hub Running python code in docker In order to run code in docker the container needs to be build from a Dockerfile. There are 2 key files in the service directory services/python/requirements.txt Normally on your system you would install modules with pip and they would be available system wide. The container that comes off Docker hub is blank and we will have to install them and bake them into the container. Before your first run add the modules that you require to the requirements.txt, each on a new line flask bs4 IMPORTANT : Every time you alter the requirements file you will need to rebuild the container and bake in the new modules To build the container run docker-compose build python . services/python/service.yml This is the template that gets concatenated into docker-compose.yml and there are a few things to note here python: container_name: python build: ./services/python/. restart: unless-stopped network_mode: host volumes: - ./volumes/python/app:/usr/src/app The container runs in host network mode. This is because i have no idea which ports you want to use. The implication of this is you will not be able to connect by name to the other container and therefore if you want to connect to the mqtt service or influx you will need to use localhost or 127.0.0.1 because the python container \"thinks\" from network perspective that it is the Pi The container is set to restart unless stopped. Therefore if you write an application it will effectively execute in an endless loop. If you only want a run once method then you will need to comment out the \"restart\" section in the docker-compose.yml file and the service.yml Where to put your code You will need to copy your code to IOTstack/volumes/python/app . The container is set to execute app.py as the main file. writing to the console If you execute a print statement the text will appear in the console of the container. The output can be accessed by running docker logs python writing to disk Inside the container the working directory is /usr/src/app as mapped in the volume command. It would be advised to read or write any data from this directory. Image clutter Doing multiple builds of the python image will create many unused images. These can be cleaned up inside portainer or by running ./scripts/prune-images.sh","title":"Python"},{"location":"Python/#python","text":"Docker hub","title":"Python"},{"location":"Python/#running-python-code-in-docker","text":"In order to run code in docker the container needs to be build from a Dockerfile. There are 2 key files in the service directory","title":"Running python code in docker"},{"location":"Python/#servicespythonrequirementstxt","text":"Normally on your system you would install modules with pip and they would be available system wide. The container that comes off Docker hub is blank and we will have to install them and bake them into the container. Before your first run add the modules that you require to the requirements.txt, each on a new line flask bs4 IMPORTANT : Every time you alter the requirements file you will need to rebuild the container and bake in the new modules To build the container run docker-compose build python .","title":"services/python/requirements.txt"},{"location":"Python/#servicespythonserviceyml","text":"This is the template that gets concatenated into docker-compose.yml and there are a few things to note here python: container_name: python build: ./services/python/. restart: unless-stopped network_mode: host volumes: - ./volumes/python/app:/usr/src/app The container runs in host network mode. This is because i have no idea which ports you want to use. The implication of this is you will not be able to connect by name to the other container and therefore if you want to connect to the mqtt service or influx you will need to use localhost or 127.0.0.1 because the python container \"thinks\" from network perspective that it is the Pi The container is set to restart unless stopped. Therefore if you write an application it will effectively execute in an endless loop. If you only want a run once method then you will need to comment out the \"restart\" section in the docker-compose.yml file and the service.yml","title":"services/python/service.yml"},{"location":"Python/#where-to-put-your-code","text":"You will need to copy your code to IOTstack/volumes/python/app . The container is set to execute app.py as the main file.","title":"Where to put your code"},{"location":"Python/#writing-to-the-console","text":"If you execute a print statement the text will appear in the console of the container. The output can be accessed by running docker logs python","title":"writing to the console"},{"location":"Python/#writing-to-disk","text":"Inside the container the working directory is /usr/src/app as mapped in the volume command. It would be advised to read or write any data from this directory.","title":"writing to disk"},{"location":"Python/#image-clutter","text":"Doing multiple builds of the python image will create many unused images. These can be cleaned up inside portainer or by running ./scripts/prune-images.sh","title":"Image clutter"},{"location":"RPIEasy_native/","text":"RPIEasy RPIEasy can now be installed under the native menu The installer will install any dependencies. If ~/rpieasy exists it will update the project to its latest, if not it will clone the project Running Running RPIEasy RPIEasy can be run by sudo ~/rpieasy/RPIEasy.py To have RPIEasy start on boot in the webui under hardware look for \"RPIEasy autostart at boot\" Ports RPIEasy will select its ports from the first available one in the list (80,8080,8008). If you run Hass.io then there will be a conflict so check the next available port","title":"RPIEasy"},{"location":"RPIEasy_native/#rpieasy","text":"RPIEasy can now be installed under the native menu The installer will install any dependencies. If ~/rpieasy exists it will update the project to its latest, if not it will clone the project","title":"RPIEasy"},{"location":"RPIEasy_native/#running-running-rpieasy","text":"RPIEasy can be run by sudo ~/rpieasy/RPIEasy.py To have RPIEasy start on boot in the webui under hardware look for \"RPIEasy autostart at boot\"","title":"Running Running RPIEasy"},{"location":"RPIEasy_native/#ports","text":"RPIEasy will select its ports from the first available one in the list (80,8080,8008). If you run Hass.io then there will be a conflict so check the next available port","title":"Ports"},{"location":"RTL_433-docker/","text":"RTL_433 Docker Requirements, you will need to have a SDR dongle for you to be able to use RTL. I've tested this with a RTL2838 Make sure you can see your receiver by running lsusb $ lsusb Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 001 Device 004: ID 0bda:2838 Realtek Semiconductor Corp. RTL2838 DVB-T Bus 001 Device 002: ID 2109:3431 VIA Labs, Inc. Hub Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Before starting the container please install RTL_433 from the native installs menu. This will setup your environment with the correct variables and programs. It is also advised to run RTL_433 to verify that it is working correctly on your system. The container is designed to send all detected messages over mqtt Edit the IOTstack/services/rtl_433/rtl_433.env file with your relevant settings for your mqtt server: MQTT_ADDRESS=mosquitto MQTT_PORT=1833 #MQTT_USER=myuser #MQTT_PASSWORD=mypassword MQTT_TOPIC=RTL_433 the container starts with the command rtl_433 -F mqtt:.... currently it does not filter any packets, you will need to do this in Node-RED","title":"RTL_433 Docker"},{"location":"RTL_433-docker/#rtl_433-docker","text":"Requirements, you will need to have a SDR dongle for you to be able to use RTL. I've tested this with a RTL2838 Make sure you can see your receiver by running lsusb $ lsusb Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 001 Device 004: ID 0bda:2838 Realtek Semiconductor Corp. RTL2838 DVB-T Bus 001 Device 002: ID 2109:3431 VIA Labs, Inc. Hub Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Before starting the container please install RTL_433 from the native installs menu. This will setup your environment with the correct variables and programs. It is also advised to run RTL_433 to verify that it is working correctly on your system. The container is designed to send all detected messages over mqtt Edit the IOTstack/services/rtl_433/rtl_433.env file with your relevant settings for your mqtt server: MQTT_ADDRESS=mosquitto MQTT_PORT=1833 #MQTT_USER=myuser #MQTT_PASSWORD=mypassword MQTT_TOPIC=RTL_433 the container starts with the command rtl_433 -F mqtt:.... currently it does not filter any packets, you will need to do this in Node-RED","title":"RTL_433 Docker"},{"location":"TasmoAdmin/","text":"TasmoAdmin References Homepage Docker Web interface The web UI can be found on \"your_ip\":8088 Usage (instructions to follow)","title":"TasmoAdmin"},{"location":"TasmoAdmin/#tasmoadmin","text":"","title":"TasmoAdmin"},{"location":"TasmoAdmin/#references","text":"Homepage Docker","title":"References"},{"location":"TasmoAdmin/#web-interface","text":"The web UI can be found on \"your_ip\":8088","title":"Web interface"},{"location":"TasmoAdmin/#usage","text":"(instructions to follow)","title":"Usage"},{"location":"Understanding-Containers/","text":"Understanding containers Content coming soon.","title":"Understanding containers"},{"location":"Understanding-Containers/#understanding-containers","text":"Content coming soon.","title":"Understanding containers"},{"location":"Updating-the-Project/","text":"Updating the project If you ran the git checkout -- 'git ls-files -m' as suggested in the old wiki entry then please check your duck.sh because it removed your domain and token Periodically updates are made to project which include new or modified container template, changes to backups or additional features. As these are released your local copy of this project will become out of date. This section deals with how to bring your project to the latest published state. Git offers build in functionality to fetch the latest changes. git pull origin master will fetch the latest changes from GitHub without overwriting files that you have modified yourself. If you have done a local commit then your project may to handle a merge conflict. This can be verified by running git status . You can ignore if it reports duck.sh as being modified. Should you have any modified scripts or templates they can be reset to the latest version with git checkout -- scripts/ .templates/ With the new latest version of the project you can now use the menu to build your stack. If there is a particular container you would like to update its template then you can select that at the overwrite option for your container. You have the choice to not to overwrite, preserve env files or to completely overwrite any changes (passwords) After your stack had been rebuild you can run docker-compose up -d to pull in the latest changes. If you have not update your images in a while consider running the ./scripts/update.sh to get the latest version of the image from Docker hub as well","title":"Updating the project"},{"location":"Updating-the-Project/#updating-the-project","text":"If you ran the git checkout -- 'git ls-files -m' as suggested in the old wiki entry then please check your duck.sh because it removed your domain and token Periodically updates are made to project which include new or modified container template, changes to backups or additional features. As these are released your local copy of this project will become out of date. This section deals with how to bring your project to the latest published state. Git offers build in functionality to fetch the latest changes. git pull origin master will fetch the latest changes from GitHub without overwriting files that you have modified yourself. If you have done a local commit then your project may to handle a merge conflict. This can be verified by running git status . You can ignore if it reports duck.sh as being modified. Should you have any modified scripts or templates they can be reset to the latest version with git checkout -- scripts/ .templates/ With the new latest version of the project you can now use the menu to build your stack. If there is a particular container you would like to update its template then you can select that at the overwrite option for your container. You have the choice to not to overwrite, preserve env files or to completely overwrite any changes (passwords) After your stack had been rebuild you can run docker-compose up -d to pull in the latest changes. If you have not update your images in a while consider running the ./scripts/update.sh to get the latest version of the image from Docker hub as well","title":"Updating the project"},{"location":"Zigbee2MQTT/","text":"Zigbe2MQTT Web Guide First startup After starting the stack check to see if there is an error due to missing device. This is because the devices are mapped differently on the Pi. If your device is not showing in the container then you can also follow the followings steps. If you get a startup failure open the docker-compose.yml file and under zigbee2mqtt change this: devices: - /dev/ttyAMA0:/dev/ttyACM0 #- /dev/ttyACM0:/dev/ttyACM0 to devices: #- /dev/ttyAMA0:/dev/ttyACM0 - /dev/ttyACM0:/dev/ttyACM0 and run docker-compose up -d again If the container starts then run docker logs zigbe2mqtt so see the log output and if your device is recognised. You may need to reset the device for docker to see it. To edit the configuration file sudo nano volumes/zigbee2mqtt/data/configuration.yaml you many need to restart the container for changes to take affect docker-compose restart zigbee2mqtt Unfortunately I don't own a zigbee device and cannot offer support on the setup you will need to follow the website instructions for further instructions https://www.zigbee2mqtt.io/ terminal access to access the terminal run docker exec -it zigbee2mqtt /bin/sh or select `/bin/sh","title":"Zigbe2MQTT"},{"location":"Zigbee2MQTT/#zigbe2mqtt","text":"Web Guide","title":"Zigbe2MQTT"},{"location":"Zigbee2MQTT/#first-startup","text":"After starting the stack check to see if there is an error due to missing device. This is because the devices are mapped differently on the Pi. If your device is not showing in the container then you can also follow the followings steps. If you get a startup failure open the docker-compose.yml file and under zigbee2mqtt change this: devices: - /dev/ttyAMA0:/dev/ttyACM0 #- /dev/ttyACM0:/dev/ttyACM0 to devices: #- /dev/ttyAMA0:/dev/ttyACM0 - /dev/ttyACM0:/dev/ttyACM0 and run docker-compose up -d again If the container starts then run docker logs zigbe2mqtt so see the log output and if your device is recognised. You may need to reset the device for docker to see it. To edit the configuration file sudo nano volumes/zigbee2mqtt/data/configuration.yaml you many need to restart the container for changes to take affect docker-compose restart zigbee2mqtt Unfortunately I don't own a zigbee device and cannot offer support on the setup you will need to follow the website instructions for further instructions https://www.zigbee2mqtt.io/","title":"First startup"},{"location":"Zigbee2MQTT/#terminal-access","text":"to access the terminal run docker exec -it zigbee2mqtt /bin/sh or select `/bin/sh","title":"terminal access"},{"location":"deconz/","text":"deCONZ References Docker Website Troubleshooting Make sure your Conbee/Conbee II/RaspBee gateway is connected. If your gateway is not detected, or no lights can be paired, try moving the device to another usb port, reboot your computer and build the stack from the menu again cd ~/IOTstack && bash ./menu.sh (select \"Pull full service from template\" if prompted). The gateway must be plugged in when the deCONZ Docker container is being built. Before running docker-compose up -d , make sure your Linux user is part of the dialout group, which allows the user access to serial devices (i.e. Conbee/Conbee II/RaspBee). If you are not certain, simply add your user to the dialout group by running the following command (username \"pi\" being used as an example): sudo usermod -a -G dialout pi Now run docker-compose up -d to build the stack. If you are still experiencing issues, run docker-compose down to remove all containers from the stack and then docker-compose up -d to build them again. Use a 0.5-1m usb extension cable with ConBee (II) to avoid wifi and bluetooth noise/interference from your Raspberry Pi (recommended by the manufacturer and often the solution to poor performance). Accessing the Phoscon UI The Phoscon UI is available using port 8090 (http://your.local.ip.address:8090/) Viewing the deCONZ Zigbee mesh The Zigbee mesh can be viewed using VNC on port 5901. The default VNC password is \"changeme\". Connecting deCONZ and Node-RED Install node-red-contrib-deconz via the \"Manage palette\" menu in Node-RED (if not already installed) and follow these 2 simple steps (also shown in the video below): Step 1: In the Phoscon UI, Go to Settings > Gateway > Advanced and click \"Authenticate app\". Step 2: In Node-RED, open a deCONZ node, select \"Add new deonz-server\", insert your ip adress and port 8090 and click \"Get settings\". Click \"Add\", \"Done\" and \"Deploy\". Your device list will not be updated before deploying.","title":"deCONZ"},{"location":"deconz/#deconz","text":"","title":"deCONZ"},{"location":"deconz/#references","text":"Docker Website","title":"References"},{"location":"deconz/#troubleshooting","text":"Make sure your Conbee/Conbee II/RaspBee gateway is connected. If your gateway is not detected, or no lights can be paired, try moving the device to another usb port, reboot your computer and build the stack from the menu again cd ~/IOTstack && bash ./menu.sh (select \"Pull full service from template\" if prompted). The gateway must be plugged in when the deCONZ Docker container is being built. Before running docker-compose up -d , make sure your Linux user is part of the dialout group, which allows the user access to serial devices (i.e. Conbee/Conbee II/RaspBee). If you are not certain, simply add your user to the dialout group by running the following command (username \"pi\" being used as an example): sudo usermod -a -G dialout pi Now run docker-compose up -d to build the stack. If you are still experiencing issues, run docker-compose down to remove all containers from the stack and then docker-compose up -d to build them again. Use a 0.5-1m usb extension cable with ConBee (II) to avoid wifi and bluetooth noise/interference from your Raspberry Pi (recommended by the manufacturer and often the solution to poor performance).","title":"Troubleshooting"},{"location":"deconz/#accessing-the-phoscon-ui","text":"The Phoscon UI is available using port 8090 (http://your.local.ip.address:8090/)","title":"Accessing the Phoscon UI"},{"location":"deconz/#viewing-the-deconz-zigbee-mesh","text":"The Zigbee mesh can be viewed using VNC on port 5901. The default VNC password is \"changeme\".","title":"Viewing the deCONZ Zigbee mesh"},{"location":"deconz/#connecting-deconz-and-node-red","text":"Install node-red-contrib-deconz via the \"Manage palette\" menu in Node-RED (if not already installed) and follow these 2 simple steps (also shown in the video below): Step 1: In the Phoscon UI, Go to Settings > Gateway > Advanced and click \"Authenticate app\". Step 2: In Node-RED, open a deCONZ node, select \"Add new deonz-server\", insert your ip adress and port 8090 and click \"Get settings\". Click \"Add\", \"Done\" and \"Deploy\". Your device list will not be updated before deploying.","title":"Connecting deCONZ and Node-RED"},{"location":"diyHue/","text":"DIY hue website About diyHue is a utility to contol the lights in your home Setup Before you start diyHue you will need to get your IP and MAC addresses. Run ip addr in the terminal Enter these values into the ./services/diyhue/diyhue.env file The default username and password it Hue and Hue respectively Usage The web interface is available on port 8070","title":"DIY hue"},{"location":"diyHue/#diy-hue","text":"website","title":"DIY hue"},{"location":"diyHue/#about","text":"diyHue is a utility to contol the lights in your home","title":"About"},{"location":"diyHue/#setup","text":"Before you start diyHue you will need to get your IP and MAC addresses. Run ip addr in the terminal Enter these values into the ./services/diyhue/diyhue.env file The default username and password it Hue and Hue respectively","title":"Setup"},{"location":"diyHue/#usage","text":"The web interface is available on port 8070","title":"Usage"},{"location":"openHAB/","text":"Openhab References Docker website openHAB has been added without Amazon Dashbutton binding. Port binding is 8080 for http and 8443 for https.","title":"Openhab"},{"location":"openHAB/#openhab","text":"","title":"Openhab"},{"location":"openHAB/#references","text":"Docker website openHAB has been added without Amazon Dashbutton binding. Port binding is 8080 for http and 8443 for https.","title":"References"},{"location":"x2go/","text":"x2go x2go is an \"alternative\" to using VNC for a remote connection. It uses X11 forwarding over ssh to provide a desktop environment Reason for using: I have a Pi 4 and I didn't buy a micro hdmi cable. You can use VNC however you are limited to a 800x600 window. Installation Install with sudo apt install x2goserver x2go cant connect to the native Raspbian Desktop so you will need to install another with sudo tasksel I chose Xfce because it is light weight. Install the x2go client from their website Now I have a full-screen client YouTube tutorial Laurence systems","title":"x2go"},{"location":"x2go/#x2go","text":"x2go is an \"alternative\" to using VNC for a remote connection. It uses X11 forwarding over ssh to provide a desktop environment Reason for using: I have a Pi 4 and I didn't buy a micro hdmi cable. You can use VNC however you are limited to a 800x600 window.","title":"x2go"},{"location":"x2go/#installation","text":"Install with sudo apt install x2goserver x2go cant connect to the native Raspbian Desktop so you will need to install another with sudo tasksel I chose Xfce because it is light weight. Install the x2go client from their website Now I have a full-screen client","title":"Installation"},{"location":"x2go/#youtube-tutorial","text":"Laurence systems","title":"YouTube tutorial"}]}